{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome <p>Just a site that contains things that I want to share. You can look at things like the Apps That I Use or my Documentation.</p> About Me Maximilian (Max) Ullrich <p>Graduate Mechanical Engineering Student &amp; Researcher \u2022 Private Pilot (SEL)</p> <p>       I\u2019m a mechanical engineer and graduate researcher at the University of       Michigan\u2013Dearborn with hands\u2011on experience in engineering design,       manufacturing, and rapid prototyping. I enjoy taking ideas from first       principles to functional prototypes, and I\u2019m energized by fast feedback       loops, clear requirements, and measurable results.     </p> <p>       My background spans lab research, CAD/CAM, and practical build/test work,       along with technical leadership and operations experience at Fairlane       Alliance Church. I\u2019ve interned with BECKER CAD\u2011CAM\u2011CAST in Germany,       which strengthened my design-for-manufacture mindset and cross\u2011cultural       communication.     </p> <p>       Outside the lab, I\u2019m a Private Pilot (SEL) and a musician\u2014guitar, drums,       and piano\u2014including drumming for a bagpipe band. I value systems thinking,       calm execution, and good documentation.     </p> <ul> <li>M.S. and B.S., Mechanical Engineering \u2014 University of Michigan\u2013Dearborn</li> <li>Graduate Student Research Assistant \u2014 UM\u2011Dearborn</li> <li>Interests: prototyping, CAD/CAM, test &amp; measurement, controls, aviation</li> </ul> <p>Let\u2019s connect:</p>"},{"location":"Old%20Pages/Apps-That-I-Use/","title":"\ud83d\udcbb Apps That I Use","text":"<p>Here is a comprehensive list of the applications I use on both my Windows and macOS systems.</p> Icon Platform Windows macOS Linux ($) Paid App"},{"location":"Old%20Pages/Apps-That-I-Use/#web","title":"\ud83c\udf10 Web","text":""},{"location":"Old%20Pages/Apps-That-I-Use/#browsers","title":"Browsers","text":"<ul> <li> Zen Browser : A minimalist, Firefox/Gecko-based browser focused on mindful, distraction-free browsing. Supports vertical tabs, split view, workspaces, and themes. Currently free and in active development (Windows, macOS, Linux).</li> </ul>"},{"location":"Old%20Pages/Apps-That-I-Use/#email","title":"Email","text":"<ul> <li> Mailspring : A fast, cross\u2011platform email client with unified inbox, advanced search, and themes. Free plan available; Pro adds read receipts, link tracking, templates, etc. (Pro $8/month).</li> </ul>"},{"location":"Old%20Pages/Apps-That-I-Use/#utilities","title":"\ud83d\udee0\ufe0f Utilities","text":""},{"location":"Old%20Pages/Apps-That-I-Use/#windows-shell","title":"Windows Shell","text":"<ul> <li> <p> Nilesoft Shell : Powerful, free, open\u2011source context menu customizer for Windows File Explorer. Create nested menus, add custom commands, and manage/remap items with minimal overhead.</p> </li> <li> <p> File Converter : Convert and compress files from the Windows Explorer context menu. Supports hundreds of formats via FFmpeg and other backends.</p> </li> <li> <p> PowerToys : Power user utilities including FancyZones, PowerRename, and Keyboard Manager.</p> </li> <li> <p> QuickLook : macOS-style spacebar previews for many file types in Windows.</p> </li> <li> <p> MicaForEveryone : Bring Windows 11 Mica material/translucency to Win32 apps for a cohesive look.</p> </li> <li> <p> AltSnap (AltDrag fork) : Move/resize windows with Alt + mouse drag; super light and efficient.</p> </li> <li> <p> Flow Launcher : Keyboard-centric launcher for apps, files, web, system commands, and plugins.</p> </li> </ul>"},{"location":"Old%20Pages/Apps-That-I-Use/#mac-specific","title":"Mac Specific","text":"<ul> <li> <p> IINA : Modern, open\u2011source media player for macOS based on mpv with wide codec support, hardware acceleration, subtitles, and a native Mac UI.</p> </li> <li> <p> itsycal: Lightweight menu bar calendar for macOS that integrates with any calendar accounts that Apple Calendar supports and offers a compact month view and event list.</p> </li> <li> <p> Shottr ($): Lightning-fast macOS screenshot tool with scrolling capture, ruler, color picker, OCR, and robust annotation.</p> </li> <li> <p> BetterDisplay ($) : Advanced display management for macOS: HiDPI scaling, virtual displays, brightness/EDID controls, PiP, and more.</p> </li> <li> <p> Ice : Open\u2011source menu bar manager to hide/reorder items, profiles, search, and an optional \u201cIce Bar\u201d for notched Macs. </p> </li> <li> <p> PairPods : One\u2011click menu bar app to share Mac audio to two Bluetooth devices. Works with most headphones/speakers.</p> </li> <li> <p> Rectangle : Free window manager with shortcuts and snap areas. Pro adds advanced snapping.</p> </li> <li> <p> LinearMouse : Per\u2011device scrolling and pointer tuning, acceleration control, button remapping, and app\u2011specific profiles.</p> </li> <li> <p> Stats : Lightweight menu bar system monitor: CPU, GPU, RAM, disks, temps, network, battery, and more.</p> </li> <li> <p> Command X ($): Enables true cut/copy/paste for files in Finder with Cmd\u2011X/C/V and visual move indicators.</p> </li> <li> <p> Boring Notch : Style or hide the menu bar/notch for a cleaner, uniform top bar with minimal overhead.</p> </li> <li> <p> TinkerTool: Access hidden preference settings in macOS to activate features in the OS and its bundled apps. No admin rights needed.</p> </li> </ul>"},{"location":"Old%20Pages/Apps-That-I-Use/#general-utilities","title":"General Utilities","text":"<ul> <li> <p> calibre : Powerful e\u2011book manager and converter with library organization, device sync, news downloads, and format conversion (EPUB, MOBI, PDF, etc.).</p> </li> <li> <p> Shutter Encoder : Powerful FFmpeg front-end for video/audio/image conversion, smart cut, rewrap, and subtitling.</p> </li> <li> <p> Twinkle Tray : Control brightness for multiple monitors via DDC/CI from the system tray.</p> </li> <li> <p> UniGetUI : GUI for winget, Chocolatey, and Scoop\u2014update, install, and remove apps in one place.</p> </li> <li> <p> AudioBookConverter : Convert audio to chapterized m4b audiobooks with embedded chapters.</p> </li> <li> <p> MIDI View: Simple MIDI monitor to view bi\u2011directional MIDI messages for debugging devices and DAWs.</p> </li> <li> <p> Multiscreen Blank: Blank individual or multiple monitors with hotkeys\u2014handy for presentations and focus.</p> </li> <li> <p> Bitfocus Companion : Control an ecosystem of devices/software with a Stream Deck or web interface. Extensible modules.</p> </li> <li> <p> ShareX : Advanced screenshot/screencast tool with workflows, OCR, and upload automation.</p> </li> <li> <p> FreeFileSync: Fast, reliable folder comparison and synchronization tool.</p> </li> <li> <p> Everything: Ultra-fast instant file search for Windows via real-time NTFS indexing.</p> </li> <li> <p> EAC (Exact Audio Copy): Bit-perfect audio CD ripper with error correction and metadata tools.</p> </li> <li> <p> PuTTY: Classic SSH/Telnet/Serial client and key tools\u2014tiny, dependable, widely compatible.</p> </li> <li> <p> JDownloader 2: Free, cross\u2011platform download manager with plugins, link decryption, archive auto\u2011extract, and batch automation.</p> </li> <li> <p> Raycast: Fast launcher/command palette for apps, files, scripts, and web actions with a large extension store.</p> </li> <li> <p> Bitwarden : Open\u2011source, end\u2011to\u2011end encrypted password manager with vault apps, extensions, TOTP, passkeys, and sharing.</p> </li> <li> <p> Private Internet Access ($) : No\u2011logs VPN with WireGuard/OpenVPN, large server network, port forwarding, and ad/tracker blocking.</p> </li> <li> <p> OpenVPN Connect : Official OpenVPN client for Access Server and community servers; import .ovpn profiles and manage tunnels.</p> </li> <li> <p> Tabby : Modern, highly customizable terminal for SSH, serial, and local shells. Tabs, panes, theming, plugins, SSH profiles/agent, Zmodem, and portable config. Cross\u2011platform builds for Windows, macOS (Intel/Apple Silicon), and Linux.</p> </li> </ul>"},{"location":"Old%20Pages/Apps-That-I-Use/#creative-apps","title":"\ud83c\udfa8 Creative Apps","text":"<ul> <li> <p> DaVinci Resolve ($): End\u2011to\u2011end video editing, color, VFX, Fairlight audio. Free and Studio tiers.</p> </li> <li> <p> Affinity Photo ($): Pro photo editing with fast raw workflow and non\u2011destructive tools.</p> </li> <li> <p> Affinity Designer ($): Vector and raster design app for illustration, logos, UI, and print.</p> </li> <li> <p> Affinity Publisher ($): Professional page layout for digital and print.</p> </li> <li> <p> Capture One ($): High\u2011quality raw processor with elite tethering and color tools.</p> </li> <li> <p> Reaper ($): Lightweight, deeply customizable DAW for audio/MIDI production. Generous trial; paid license.</p> </li> <li> <p> Blender : Full 3D pipeline\u2014modeling, sculpting, animation, sim, and rendering. Free/open source.</p> </li> <li> <p> MuseScore : Open\u2011source music notation with playback, engraving, and plugin ecosystem.</p> </li> <li> <p> Siril : Open-source astronomical image processing tool for astrophotography, including calibration, stacking, and advanced editing.</p> </li> <li> <p> Upscayl : Free and open-source AI image upscaler that uses advanced models to enlarge and enhance images.</p> </li> </ul>"},{"location":"Old%20Pages/Apps-That-I-Use/#cad-3d-printing","title":"\ud83e\udde9 CAD / 3D Printing","text":"<ul> <li> <p> Autodesk Fusion ($): Cloud-connected CAD/CAM/CAE for product design, machining (Fusion Manufacture), electronics, and simulation. Commercial subscription; free tiers for personal use and education are available. macOS and Windows supported. Note: Autodesk is ending support for Windows 10 for future Fusion releases and requires Apple\u2011supported macOS/hardware combos going forward. </p> </li> <li> <p> SOLIDWORKS ($): Industry-standard parametric CAD with simulation and data management ecosystem. Windows-only desktop application. On Macs it\u2019s commonly run via virtualization (e.g., Parallels) but not natively supported. Perpetual/subscription licensing via resellers.</p> </li> <li> <p> OrcaSlicer : Free, open-source slicer (based on Bambu Studio/SuperSlicer) with strong calibration tools, seam/wall control, and integrations (Klipper, OctoPrint, Obico). Cross\u2011platform builds for Win/macOS (Intel + Apple Silicon) and Linux.</p> </li> </ul>"},{"location":"Old%20Pages/Apps-That-I-Use/#launchers-games","title":"\ud83c\udfae Launchers / Games","text":"<ul> <li> PrismLauncher : Community\u2011driven Minecraft launcher with instance management, modpack support, per\u2011instance Java, and portable profiles. Cross\u2011platform.</li> </ul>"},{"location":"apps/","title":"\ud83d\udcbb Apps That I Use","text":"<p>Here is a comprehensive list of the applications I use on both my Windows and macOS systems.</p> Icon Platform Windows macOS Linux ($) Paid App","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#browsing-communication","title":"\ud83c\udf10 Browsing &amp; Communication","text":"<ul> <li> <p> Zen Browser : A minimalist, Firefox/Gecko-based browser focused on mindful, distraction-free browsing. Supports vertical tabs, split view, workspaces, and themes. Currently free and in active development (Windows, macOS, Linux).</p> </li> <li> <p> Mailspring : A fast, cross\u2011platform email client with unified inbox, advanced search, and themes. Free plan available; Pro adds read receipts, link tracking, templates, etc. (Pro $8/month).</p> </li> </ul>","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#system-productivity","title":"\ud83c\udf9b\ufe0f System &amp; Productivity","text":"","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#crossplatform-launchers-search-terminals","title":"Cross\u2011Platform Launchers, Search, Terminals","text":"<ul> <li> Raycast: Fast launcher/command palette for apps, files, scripts, and web actions with a large extension store.</li> <li> Flow Launcher : Keyboard-centric launcher for apps, files, web, system commands, and plugins.</li> <li> Tabby : Modern, highly customizable terminal for SSH, serial, and local shells. Tabs, panes, theming, plugins, SSH profiles/agent, Zmodem, and portable config. Cross\u2011platform builds for Windows, macOS (Intel/Apple Silicon), and Linux.</li> <li> Everything: Ultra-fast instant file search for Windows via real-time NTFS indexing.</li> </ul>","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#macos-enhancements","title":"macOS Enhancements","text":"<ul> <li> itsycal: Lightweight menu bar calendar for macOS that integrates with any calendar accounts that Apple Calendar supports and offers a compact month view and event list.</li> <li> Shottr ($): Lightning-fast macOS screenshot tool with scrolling capture, ruler, color picker, OCR, and robust annotation.</li> <li> BetterDisplay ($) : Advanced display management for macOS: HiDPI scaling, virtual displays, brightness/EDID controls, PiP, and more.</li> <li> Ice : Open\u2011source menu bar manager to hide/reorder items, profiles, search, and an optional \u201cIce Bar\u201d for notched Macs. </li> <li> PairPods : One\u2011click menu bar app to share Mac audio to two Bluetooth devices. Works with most headphones/speakers.</li> <li> Rectangle : Free window manager with shortcuts and snap areas. Pro adds advanced snapping.</li> <li> LinearMouse : Per\u2011device scrolling and pointer tuning, acceleration control, button remapping, and app\u2011specific profiles.</li> <li> Stats : Lightweight menu bar system monitor: CPU, GPU, RAM, disks, temps, network, battery, and more.</li> <li> Command X ($): Enables true cut/copy/paste for files in Finder with Cmd\u2011X/C/V and visual move indicators.</li> <li> Boring Notch : Style or hide the menu bar/notch for a cleaner, uniform top bar with minimal overhead.</li> <li> TinkerTool: Access hidden preference settings in macOS to activate features in the OS and its bundled apps. No admin rights needed.</li> </ul>","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#windows-enhancements","title":"Windows Enhancements","text":"<ul> <li> Nilesoft Shell : Powerful, free, open\u2011source context menu customizer for Windows File Explorer. Create nested menus, add custom commands, and manage/remap items with minimal overhead.</li> <li> File Converter : Convert and compress files from the Windows Explorer context menu. Supports hundreds of formats via FFmpeg and other backends.</li> <li> PowerToys : Power user utilities including FancyZones, PowerRename, and Keyboard Manager.</li> <li> QuickLook : macOS-style spacebar previews for many file types in Windows.</li> <li> MicaForEveryone : Bring Windows 11 Mica material/translucency to Win32 apps for a cohesive look.</li> <li> AltSnap (AltDrag fork) : Move/resize windows with Alt + mouse drag; super light and efficient.</li> <li> Twinkle Tray : Control brightness for multiple monitors via DDC/CI from the system tray.</li> <li> UniGetUI : GUI for winget, Chocolatey, and Scoop\u2014update, install, and remove apps in one place.</li> <li> Multiscreen Blank: Blank individual or multiple monitors with hotkeys\u2014handy for presentations and focus.</li> </ul>","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#files-sync-networking-security","title":"\ud83d\udcc1 Files, Sync, Networking, Security","text":"<ul> <li> FreeFileSync: Fast, reliable folder comparison and synchronization tool.</li> <li> Bitwarden : Open\u2011source, end\u2011to\u2011end encrypted password manager with vault apps, extensions, TOTP, passkeys, and sharing.</li> <li> Private Internet Access ($) : No\u2011logs VPN with WireGuard/OpenVPN, large server network, port forwarding, and ad/tracker blocking.</li> <li> OpenVPN Connect : Official OpenVPN client for Access Server and community servers; import .ovpn profiles and manage tunnels.</li> <li> PuTTY: Classic SSH/Telnet/Serial client and key tools\u2014tiny, dependable, widely compatible.</li> <li> JDownloader 2: Free, cross\u2011platform download manager with plugins, link decryption, archive auto\u2011extract, and batch automation.</li> <li> ConnectMeNow: A menu bar utility for macOS to quickly and automatically mount network shares (SMB, AFP, WebDAV, etc.)</li> </ul>","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#media-audio-tools","title":"\ud83c\udfa5 Media &amp; Audio Tools","text":"<ul> <li> IINA : Modern, open\u2011source media player for macOS based on mpv with wide codec support, hardware acceleration, subtitles, and a native Mac UI.</li> <li> Shutter Encoder : Powerful FFmpeg front-end for video/audio/image conversion, smart cut, rewrap, and subtitling.</li> <li> EAC (Exact Audio Copy): Bit-perfect audio CD ripper with error correction and metadata tools.</li> <li> AudioBookConverter : Convert audio to chapterized m4b audiobooks with embedded chapters.</li> <li> MIDI View: Simple MIDI monitor to view bi\u2011directional MIDI messages for debugging devices and DAWs.</li> </ul>","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#knowledge-reading","title":"\ud83d\udcda Knowledge &amp; Reading","text":"<ul> <li> calibre : Powerful e\u2011book manager and converter with library organization, device sync, news downloads, and format conversion (EPUB, MOBI, PDF, etc.).</li> </ul>","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#creative-apps","title":"\ud83c\udfa8 Creative Apps","text":"<ul> <li> DaVinci Resolve ($): End\u2011to\u2011end video editing, color, VFX, Fairlight audio. Free and Studio tiers.</li> <li> Affinity Photo ($): Pro photo editing with fast raw workflow and non\u2011destructive tools.</li> <li> Affinity Designer ($): Vector and raster design app for illustration, logos, UI, and print.</li> <li> Affinity Publisher ($): Professional page layout for digital and print.</li> <li> Capture One ($): High\u2011quality raw processor with elite tethering and color tools.</li> <li> Reaper ($): Lightweight, deeply customizable DAW for audio/MIDI production. Generous trial; paid license.</li> <li> Blender : Full 3D pipeline\u2014modeling, sculpting, animation, sim, and rendering. Free/open source.</li> <li> MuseScore : Open\u2011source music notation with playback, engraving, and plugin ecosystem.</li> <li> Siril : Open-source astronomical image processing tool for astrophotography, including calibration, stacking, and advanced editing.</li> <li> Upscayl : Free and open-source AI image upscaler that uses advanced models to enlarge and enhance images.</li> </ul>","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#cad-3d-printing","title":"\ud83e\udde9 CAD / 3D Printing","text":"<ul> <li> Autodesk Fusion ($): Cloud-connected CAD/CAM/CAE for product design, machining (Fusion Manufacture), electronics, and simulation. Commercial subscription; free tiers for personal use and education are available. macOS and Windows supported. Note: Autodesk is ending support for Windows 10 for future Fusion releases and requires Apple\u2011supported macOS/hardware combos going forward.</li> <li> SOLIDWORKS ($): Industry-standard parametric CAD with simulation and data management ecosystem. Windows-only desktop application. On Macs it\u2019s commonly run via virtualization (e.g., Parallels) but not natively supported. Perpetual/subscription licensing via resellers.</li> <li> OrcaSlicer : Free, open-source slicer (based on Bambu Studio/SuperSlicer) with strong calibration tools, seam/wall control, and integrations (Klipper, OctoPrint, Obico). Cross\u2011platform builds for Win/macOS (Intel + Apple Silicon) and Linux.</li> </ul>","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"apps/#launchers-games","title":"\ud83c\udfae Launchers / Games","text":"<ul> <li> PrismLauncher : Community\u2011driven Minecraft launcher with instance management, modpack support, per\u2011instance Java, and portable profiles. Cross\u2011platform.</li> </ul>","tags":["utilities","windows","macOS","linux","productivity"]},{"location":"documentation/","title":"Documentation","text":"<p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol> <p></p> <p>Lorem ipsum dolor sit amet consectetur adipiscing elit.(1) Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor.(2) Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.</p> <ol> <li> Hello</li> <li> World     test twowowo</li> </ol> <p>Julius Caesar</p> <p>What are you gonna do? Stab Me?</p> <p>-- Gets Stabbed</p> <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.</p> <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.</p> <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.</p> <p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.</p>"},{"location":"documentation/tags/","title":"Tags","text":""},{"location":"documentation/Git%20Hub/Git%20Commands/","title":"Helpful Git Commands","text":"<p>A curated list of common and useful CLI commands for managing Git repositories.</p> <p>Tip</p> <p>Replace placeholders like <code>&lt;branch-name&gt;</code>, <code>&lt;commit-hash&gt;</code>, <code>&lt;remote-name&gt;</code>, <code>&lt;tag-name&gt;</code>, and <code>&lt;file-path&gt;</code>.</p> <p>Warning</p> <p>Commands that rewrite history (<code>rebase</code>, <code>reset --hard</code>, <code>commit --amend</code>) can be dangerous, especially in shared repositories. Always ensure you understand a command's function before using it. When in doubt, make a backup of your repository.</p>"},{"location":"documentation/Git%20Hub/Git%20Commands/#configuration","title":"\u2699\ufe0f Configuration &amp; Setup","text":"<p>Set your Git identity and configure basic settings, typically once per machine.</p> <pre><code>git config --global user.name \"Your Name\"         # Set your name and email globally\ngit config --global user.email \"you@example.com\"\ngit config --global init.defaultBranch main       # Set the default branch name for new repos\ngit config --global core.editor \"vim\"             # Set your default editor for commit messages\ngit config --global --list                        # List all global configuration settings\n</code></pre>"},{"location":"documentation/Git%20Hub/Git%20Commands/#creating-cloning-repositories","title":"\ud83c\udf31 Creating &amp; Cloning Repositories","text":"<p>Initialize a new repository or copy an existing one.</p> <pre><code>git init                                          # Initialize a new repository in the current directory\ngit clone &lt;repo-url&gt;                              # Clone an existing repository\ngit clone &lt;repo-url&gt; &lt;directory-name&gt;             # Clone a repository into a specific directory\n</code></pre>"},{"location":"documentation/Git%20Hub/Git%20Commands/#daily-workflow-staging-committing","title":"\ud83d\udd04 Daily Workflow \u2014 Staging &amp; Committing","text":"<p>The core commands for tracking and saving changes.</p> <pre><code>git status                                        # Check the status of your working directory\ngit add &lt;file-path&gt;                               # Stage a specific file\ngit add .                                         # Stage all new and modified files\ngit add -p                                        # Interactively stage parts of files\ngit diff                                          # View unstaged changes\ngit diff --staged                                 # View staged changes\ngit commit -m \"Your commit message\"               # Commit staged changes with a short message\ngit commit                                        # Commit staged changes, opening your editor for a detailed message\n</code></pre>"},{"location":"documentation/Git%20Hub/Git%20Commands/#branching-merging","title":"\ud83c\udf3f Branching &amp; Merging","text":"<p>Manage parallel lines of development.</p> <pre><code>git branch                                        # List all local branches\ngit branch -a                                     # List all local and remote branches\ngit branch &lt;new-branch-name&gt;                      # Create a new branch\ngit switch &lt;branch-name&gt;                          # Switch to a different branch (modern)\ngit switch -c &lt;new-branch-name&gt;                   # Create and switch to a new branch\ngit merge &lt;branch-name-to-merge&gt;                  # Merge a branch into your current branch\ngit branch -d &lt;branch-name&gt;                       # Delete a merged local branch\ngit branch -D &lt;branch-name&gt;                       # DANGER: Force-delete a local branch\n</code></pre>"},{"location":"documentation/Git%20Hub/Git%20Commands/#viewing-history-logs","title":"\ud83d\udcdc Viewing History &amp; Logs","text":"<p>Inspect the project's history.</p> <pre><code>git log                                           # View commit history\ngit log --oneline --graph --decorate --all        # View history as a compact graph\ngit log --stat                                    # View history with file change stats\ngit show &lt;commit-hash&gt;                            # Show the full changes for a specific commit\ngit log -p &lt;file-path&gt;                            # Show the change history for a specific file\n</code></pre>"},{"location":"documentation/Git%20Hub/Git%20Commands/#working-with-remotes","title":"\ud83d\udce1 Working with Remotes","text":"<p>Collaborate and sync with a remote server.</p> <pre><code>git remote -v                                     # List configured remotes\ngit remote add &lt;remote-name&gt; &lt;repo-url&gt;           # Add a new remote\ngit fetch &lt;remote-name&gt;                           # Fetch changes from a remote\ngit pull &lt;remote-name&gt; &lt;branch-name&gt;              # Fetch and merge changes from a remote\ngit push &lt;remote-name&gt; &lt;branch-name&gt;              # Push changes to a remote\ngit push -u &lt;remote-name&gt; &lt;branch-name&gt;           # Push and set upstream tracking branch\n</code></pre>"},{"location":"documentation/Git%20Hub/Git%20Commands/#undoing-changes-fixing-mistakes","title":"\u21a9\ufe0f Undoing Changes &amp; Fixing Mistakes","text":"<p>Correct mistakes, from unstaging a file to reverting a commit.</p> <pre><code>git commit --amend --no-edit                      # Add staged changes to the previous commit\ngit restore --staged &lt;file-path&gt;                  # Unstage a file\ngit restore &lt;file-path&gt;                           # Discard changes to an unstaged file\ngit revert &lt;commit-hash&gt;                          # Create a new commit that undoes a prior commit (safe)\ngit reset --soft HEAD~1                           # Un-commit, keep changes staged\ngit reset --mixed HEAD~1                          # Un-commit, keep changes in working directory (default)\ngit reset --hard HEAD~1                           # DANGER: Discard last commit and all changes\n</code></pre>"},{"location":"documentation/Git%20Hub/Git%20Commands/#stashing-changes","title":"\ud83d\udce6 Stashing Changes","text":"<p>Temporarily save uncommitted changes to switch contexts.</p> <pre><code>git stash                                         # Temporarily save uncommitted changes\ngit stash list                                    # List all stashes\ngit stash pop                                     # Apply and drop the most recent stash\ngit stash apply                                   # Apply the most recent stash but keep it\ngit stash drop                                    # Drop the most recent stash\n</code></pre>"},{"location":"documentation/Git%20Hub/Git%20Commands/#file-management-cleanup","title":"\ud83d\uddd1\ufe0f File Management &amp; Cleanup","text":"<p>Remove unwanted files and perform repository maintenance.</p> <pre><code>git rm &lt;file-path&gt;                                # Remove a file from the repository\nfind . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch # Find and remove all .DS_Store files\ngit clean -f                                      # DANGER: Remove all untracked files\ngit clean -fd                                     # DANGER: Remove untracked files AND directories\ngit gc                                            # Run garbage collection to optimize the repo\n</code></pre>"},{"location":"documentation/Proxmox/","title":"\ud83d\udc27 Welcome to Proxmox VE","text":"<p>Proxmox Virtual Environment (VE) is a powerful tool that lets you run multiple, separate operating systems on a single physical computer. It uses a simple web-based interface to manage everything, making it easy to create and control your virtual machines and containers. \ud83d\udda5\ufe0f Virtual Machines vs. Containers</p> <p>Proxmox can run two main types of virtual systems:</p> <ul> <li> <p>Virtual Machines (VMs): A VM acts like a complete, independent computer. Use a VM when you need to run a completely different operating system, like running a Windows machine on your Linux server.</p> </li> <li> <p>Containers (CTs): Containers are a lightweight and much faster alternative. They share the host server's operating system but keep applications isolated. They are perfect for running Linux-based applications efficiently.</p> </li> </ul>"},{"location":"documentation/Proxmox/#accessing-the-web-interface","title":"\ud83d\ude80 Accessing the Web Interface","text":"<p>The primary way to manage Proxmox is through its web dashboard. You can access it by opening the following address in your web browser.</p> <p><code>https://&lt;your-node-ip&gt;:8006</code></p> <p>From this interface, you can manage all your virtual systems, storage, and network settings.</p>"},{"location":"documentation/Proxmox/Helpful%20Commands/","title":"\ud83e\uddf0 Helpful Proxmox Commands","text":"<p>Battle\u2011tested CLI commands for administering Proxmox VE: VMs (QEMU), LXC containers, storage, networking, cluster, HA, services, backups, GPU passthrough/reset, and troubleshooting.</p> <p>Tip</p> <p>Replace placeholders like <code>&lt;VMID&gt;</code>, <code>&lt;CTID&gt;</code>, <code>&lt;storage&gt;</code>, <code>&lt;node&gt;</code>, <code>&lt;pool&gt;</code>, <code>&lt;iface&gt;</code>.</p> <p>Warning</p> <p>Commands that modify hardware, storage, networking, or cluster state can disrupt running workloads. Prefer maintenance windows, backups, and snapshots where appropriate. Many operations require root; use sudo or run as root on the PVE node.</p>"},{"location":"documentation/Proxmox/Helpful%20Commands/#basics","title":"\ud83e\udded Basics \u2014 system and services","text":"<p>Check versions and node health</p> <pre><code>pveversion -v                        # Proxmox + package versions\npvesh get /version                   # API version\nhostnamectl; uptime\nfree -h\ndf -h -x tmpfs -x devtmpfs\nlsblk -o NAME,SIZE,TYPE,FSTYPE,MOUNTPOINT\n</code></pre> <p>Key services and quick restarts</p> <pre><code>systemctl status pveproxy pvedaemon pvestatd pve-cluster corosync pve-firewall\njournalctl -u pveproxy -b -n 200 -f\njournalctl -u pve-cluster -b -n 200\nsystemctl restart pveproxy pvedaemon   # Restarts Web UI/daemon\n</code></pre> <p>Stale locks</p> <pre><code>qm unlock &lt;VMID&gt;\npct unlock &lt;CTID&gt;\n</code></pre> <p>Task stream and per-guest logs</p> <pre><code>tail -f /var/log/pve/tasks/active\ntail -f /var/log/pve/tasks/index\ntail -f /var/log/pve/qemu-server/&lt;VMID&gt;.log\ntail -f /var/log/pve/lxc/&lt;CTID&gt;.log\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#qemu-vms","title":"\ud83d\udda5\ufe0f QEMU VMs (qm)","text":"<p>List, inspect, start/stop</p> <pre><code>qm list\nqm status &lt;VMID&gt;\nqm config &lt;VMID&gt;\nqm start &lt;VMID&gt;\nqm shutdown &lt;VMID&gt;\nqm stop &lt;VMID&gt;            # Hard stop\nqm reset &lt;VMID&gt;\n</code></pre> <p>Console, monitor, send keys</p> <pre><code>qm terminal &lt;VMID&gt;        # Serial console (if configured)\nqm monitor &lt;VMID&gt;         # QEMU monitor\nqm sendkey &lt;VMID&gt; ctrl-alt-delete\n</code></pre> <p>Resources and devices</p> <pre><code>qm set &lt;VMID&gt; -memory 16384 -cores 8\nqm set &lt;VMID&gt; -agent enabled=1\nqm set &lt;VMID&gt; -net0 virtio,bridge=vmbr0\nqm set &lt;VMID&gt; -scsi0 &lt;storage&gt;:vm-&lt;VMID&gt;-disk-0\nqm resize &lt;VMID&gt; scsi0 +20G\n</code></pre> <p>Snapshots and rollback</p> <pre><code>qm snapshot &lt;VMID&gt; pre-upgrade --description \"Before upgrade\"\nqm listsnapshot &lt;VMID&gt;\nqm rollback &lt;VMID&gt; pre-upgrade\nqm delsnapshot &lt;VMID&gt; pre-upgrade\n</code></pre> <p>Import disks and images</p> <pre><code># Import disk image into storage, then attach it\nqm importdisk &lt;VMID&gt; /path/to/image.qcow2 &lt;storage&gt;\nqm set &lt;VMID&gt; -scsi1 &lt;storage&gt;:vm-&lt;VMID&gt;-disk-1\n\n# Optional: convert formats\nqemu-img convert -p -O qcow2 source.vmdk dest.qcow2\n</code></pre> <p>Live/online migration</p> <pre><code>qm migrate &lt;VMID&gt; &lt;targetnode&gt; --online\n# If local disks exist:\nqm migrate &lt;VMID&gt; &lt;targetnode&gt; --online --with-local-disks\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#lxc-containers","title":"\ud83d\udce6 LXC Containers (pct)","text":"<p>Basics</p> <pre><code>pct list\npct config &lt;CTID&gt;\npct start &lt;CTID&gt;\npct stop &lt;CTID&gt;\npct reboot &lt;CTID&gt;\npct console &lt;CTID&gt;          # Attach console\npct enter &lt;CTID&gt;            # Enter shell\npct exec &lt;CTID&gt; -- bash -lc \"apt update &amp;&amp; apt -y upgrade\"\npct set &lt;CTID&gt; -memory 4096 -cores 2\n</code></pre> <p>Snapshots and restore</p> <pre><code>pct snapshot &lt;CTID&gt; safe-point\npct listsnapshot &lt;CTID&gt;\npct rollback &lt;CTID&gt; safe-point\npct restore &lt;CTID&gt; /mnt/pve/&lt;storage&gt;/dump/vzdump-lxc-&lt;CTID&gt;-*.tar.zst \\\n  --storage &lt;storage&gt;\n</code></pre> <p>Migrate</p> <pre><code>pct migrate &lt;CTID&gt; &lt;targetnode&gt; --online\n</code></pre> <p>Mount/unmount rootfs (offline maintenance)</p> <pre><code>pct mount &lt;CTID&gt;\n# ... operate on /var/lib/lxc/&lt;CTID&gt;/rootfs ...\npct unmount &lt;CTID&gt;\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#backups-restore","title":"\ud83d\udcbe Backups and Restore (vzdump, qmrestore, pct restore)","text":"<p>Create backups</p> <pre><code># VM backup\nvzdump &lt;VMID&gt; --storage &lt;storage&gt; --mode snapshot --compress zstd \\\n  --notes-template \"{{node}}/{{vmid}} {{guestname}} {{date}}-{{time}}\"\n\n# Container backup\nvzdump &lt;CTID&gt; --storage &lt;storage&gt; --mode snapshot --compress zstd\n</code></pre> <p>List backup files</p> <pre><code>pvesm list &lt;storage&gt;\nls -lh /mnt/pve/&lt;storage&gt;/dump\n</code></pre> <p>Restore VM and CT</p> <pre><code># Restore VM to new VMID\nqmrestore /mnt/pve/&lt;storage&gt;/dump/vzdump-qemu-&lt;OLD&gt;-*.vma.zst &lt;NEW_VMID&gt; \\\n  --storage &lt;storage&gt;\n\n# Restore Container\npct restore &lt;NEW_CTID&gt; \\\n  /mnt/pve/&lt;storage&gt;/dump/vzdump-lxc-&lt;OLD&gt;-*.tar.zst --storage &lt;storage&gt;\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#storage","title":"\ud83d\uddc4\ufe0f Storage (pvesm, ZFS, LVM)","text":"<p>Proxmox storage CLI</p> <pre><code>pvesm status\npvesm list &lt;storage&gt;\npvesm nfsscan &lt;server&gt;\npvesm iscsiscan &lt;server&gt;\n</code></pre> <p>ZFS basics</p> <pre><code>zpool status\nzpool list\nzfs list -o name,used,avail,mountpoint\nzpool scrub &lt;pool&gt;\nzpool clear &lt;pool&gt;\n# Import/export (maintenance)\nzpool export &lt;pool&gt;\nzpool import -f &lt;pool&gt;\n</code></pre> <p>LVM/LVM-thin</p> <pre><code>pvs\nvgs\nlvs -a -o +devices,lv_size,data_percent,metadata_percent\n# Example: check thin pool usage\nlvs -a -o name,vg_name,lv_size,metadata_percent,data_percent\n</code></pre> <p>Replication (built-in)</p> <pre><code>pvesr status\npvesr list\n# Run a job immediately\npvesr run --id &lt;jobid&gt;\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#networking-firewall","title":"\ud83c\udf10 Networking and Firewall","text":"<p>Interfaces and bridges</p> <pre><code>ip -c a\nip -c r\nbridge link show\ngrep -R \"vmbr\" /etc/network/interfaces /etc/network/interfaces.d || true\n</code></pre> <p>Apply interface changes (ifupdown2)</p> <pre><code>ifreload -a\n# Fallback:\nsystemctl restart networking\n</code></pre> <p>Connectivity and ports</p> <pre><code>ss -tulpn | grep -E \"8006|22\"      # Web UI and SSH\nping -c 3 &lt;host-or-ip&gt;\ntraceroute &lt;host-or-ip&gt;            # apt install traceroute if missing\n</code></pre> <p>Firewall (PVE 8 uses nftables backend)</p> <pre><code>pve-firewall status\npve-firewall compile\npve-firewall reload\nnft list ruleset | less\n</code></pre> <p>Packet capture (example on vmbr0)</p> <pre><code>tcpdump -ni vmbr0 port 8006\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#cluster-quorum","title":"\ud83e\udde9 Cluster and Quorum (pvecm, corosync)","text":"<p>Status and nodes</p> <pre><code>pvecm status\npvecm nodes\ncorosync-quorumtool -s\nsystemctl status corosync pve-cluster\njournalctl -u corosync -b -n 200\n</code></pre> <p>Quorum override for maintenance (use with care)</p> <pre><code># Temporarily set expected votes (e.g., in a 1-node surviving scenario)\npvecm expected 1\n</code></pre> <p>Add/remove nodes</p> <pre><code># From the new node:\npvecm add &lt;IP-of-cluster-node&gt;\n\n# From a healthy cluster node:\npvecm delnode &lt;nodename&gt;\n</code></pre> <p>PMXCFS check</p> <pre><code>ls -l /etc/pve            # FUSE filesystem\ngetfacl /etc/pve 2&gt;/dev/null || true\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#ha","title":"\ud83d\udedf High Availability (ha-manager)","text":"<p>Status and configuration</p> <pre><code>ha-manager status\nha-manager config\n</code></pre> <p>Add/remove a VM to HA</p> <pre><code>ha-manager add vm:&lt;VMID&gt; --group default --state started\nha-manager remove vm:&lt;VMID&gt;\nha-manager set vm:&lt;VMID&gt; --state stopped\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#certs-web","title":"\ud83d\udd10 Certificates and Web UI","text":"<p>Renew/recreate local certs and restart UI</p> <pre><code>pvecm updatecerts -f\nsystemctl restart pveproxy\n</code></pre> <p>Inspect current cert</p> <pre><code>openssl x509 -in /etc/pve/local/pve-ssl.pem -noout -subject -dates\nss -tnlp | grep 8006\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#gpu","title":"\ud83e\udde0 GPU Passthrough and Reset","text":"<p>Identify GPU and driver bindings</p> <pre><code>lspci -nnk | grep -iEA3 \"vga|3d|display|nvidia|amd|intel\"\ndmesg | grep -iE \"IOMMU|DMAR|VFIO|AMD-Vi\"\n</code></pre> <p>List IOMMU groups (useful for isolation)</p> <pre><code>for g in /sys/kernel/iommu_groups/*; do\n  echo \"Group ${g##*/}\"\n  for d in \"$g\"/devices/*; do\n    lspci -nns \"${d##*/}\"\n  done\n  echo\ndone\n</code></pre> Note about escaping colons <p>In normal Linux shells, you do not need to escape colons in sysfs PCI paths (e.g., 0000:c1:00.0). If you prefer, escaping them with backslashes also works, but it is not required.</p> <p>Quick GPU device reset and PCI rescan</p> <pre><code># Example device path: /sys/bus/pci/devices/0000:c1:00.0\necho 1 &gt; /sys/bus/pci/devices/0000:c1:00.0/remove\necho 1 &gt; /sys/bus/pci/rescan\n</code></pre> <p>Function-level reset (if supported)</p> <pre><code>echo 1 &gt; /sys/bus/pci/devices/0000:01:00.0/reset\n</code></pre> <p>Safer unbind/bind to vfio-pci (host must not use the GPU)</p> <pre><code>GPU=0000:01:00.0\nVENDOR_DEVICE=$(lspci -nns \"$GPU\" | awk -F'[][]' '{print $2}')\necho \"$VENDOR_DEVICE\" &gt; /sys/bus/pci/drivers/vfio-pci/new_id\necho -n \"$GPU\" &gt; /sys/bus/pci/devices/$GPU/driver/unbind\necho -n \"$GPU\" &gt; /sys/bus/pci/drivers/vfio-pci/bind\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#gpu-workarounds","title":"\u2699\ufe0f GPU Passthrough Workarounds","text":""},{"location":"documentation/Proxmox/Helpful%20Commands/#ubuntunvidia-gdm3-display-fix","title":"Ubuntu/Nvidia <code>gdm3</code> Display Fix","text":"<p>When passing an Nvidia GPU through to an Ubuntu VM (Desktop version), the default display manager, gdm3, often conflicts with Proxmox's virtual display (SPICE/VNC). This can result in a black screen on the virtual console after the guest drivers are installed, making it difficult to manage the VM without a physical monitor attached to the GPU.</p> <p>The most reliable solution is to switch the guest VM's display manager from <code>gdm3</code> to <code>lightdm</code>, which is more compatible with this type of setup. Execute these commands inside the Ubuntu guest VM's terminal.</p> <pre><code># Update package list and install lightdm\nsudo apt update\nsudo apt install lightdm -y\n\n# If you were not prompted to choose a default display manager during\n# installation, run this command and select lightdm from the menu.\nsudo dpkg-reconfigure lightdm\n\n# Reboot the VM for the change to take full effect.\nsudo reboot\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#logs","title":"\ud83e\uddfe Logs and Troubleshooting","text":"<p>System and Proxmox services</p> <pre><code>journalctl -xe\njournalctl -b -u pveproxy -u pvedaemon -u pvestatd -u pve-cluster \\\n  -u corosync -u pve-firewall --no-pager | less\ndmesg -T | less\n</code></pre> <p>Guest-specific logs</p> <pre><code>tail -f /var/log/pve/qemu-server/&lt;VMID&gt;.log\ntail -f /var/log/pve/lxc/&lt;CTID&gt;.log\n</code></pre> <p>Network diagnostics</p> <pre><code>ip -c a\nip -c r\nnft list ruleset | less\ntcpdump -ni &lt;iface&gt; host &lt;ip-or-host&gt; and port &lt;port&gt;\n</code></pre> <p>Stuck tasks and locks</p> <pre><code>ps aux | grep -E \"qm .*&lt;VMID&gt;|vzdump|lxc\"\nqm unlock &lt;VMID&gt;\npct unlock &lt;CTID&gt;\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#updates","title":"\u2b06\ufe0f Updates and Repositories","text":"<p>Check repos</p> <pre><code>cat /etc/apt/sources.list\nls -1 /etc/apt/sources.list.d/\ncat /etc/apt/sources.list.d/pve-enterprise.list 2&gt;/dev/null || true\ncat /etc/apt/sources.list.d/pve-no-subscription.list 2&gt;/dev/null || true\n</code></pre> <p>Update safely</p> <pre><code>apt update\napt full-upgrade\npveversion -v\nreboot\n</code></pre>"},{"location":"documentation/Proxmox/Helpful%20Commands/#pvesh","title":"\ud83d\udd0c Proxmox API CLI (pvesh)","text":"<p>Quick queries</p> <pre><code>pvesh get /cluster/resources\npvesh get /nodes\npvesh get /nodes/$(hostname)/qemu\npvesh get /nodes/$(hostname)/lxc\n</code></pre> <p>Example: get a VM\u2019s status via API</p> <pre><code>pvesh get /nodes/$(hostname)/qemu/&lt;VMID&gt;/status/current\n</code></pre>"},{"location":"documentation/REAPER/","title":"\ud83c\udfb9 REAPER: An Overview","text":"<p>REAPER (Rapid Environment for Audio Production, Engineering, and Recording) is a powerful and highly customizable Digital Audio Workstation (DAW) developed by Cockos. REAPER is incredibly small, stable, and flexible allowing it to be tailored to any workflow.</p>"},{"location":"documentation/REAPER/#key-resources","title":"Key Resources","text":"<ul> <li>Official Website: The place to download REAPER and purchase a license.</li> <li>Official Forums: The main hub for the REAPER community.</li> <li>ReaPack: The essential package manager for extending REAPER.</li> <li>REAPER Mania: An extensive collection of high-quality video tutorials by Kenny Gioia, hosted on the official site.</li> </ul>"},{"location":"documentation/REAPER/current-setup/","title":"\ud83c\udfb9 My Audio Production Setup","text":"<p>This document provides a detailed overview of my audio production environment. The goal is a seamless and automated workflow centered around REAPER, the PreSonus Quantum 2626 audio interface, and a set of custom scripts that tie the hardware and software together. The entire system is designed for single-switch power management, making startup and shutdown incredibly simple.</p> <p>This guide is designed to be a complete reference for replicating the setup from scratch.</p>"},{"location":"documentation/REAPER/current-setup/#hardware-connectivity","title":"Hardware &amp; Connectivity","text":"<p>The physical setup uses a central power conditioner to manage peripherals, with data and audio signals routed through the Quantum 2626 interface.</p>"},{"location":"documentation/REAPER/current-setup/#core-components","title":"Core Components","text":"<ul> <li>Furman Power Conditioner: All hardware, except the Mac, is plugged into this unit. Turning it on or off controls power to the entire studio in one step.</li> <li>PreSonus Quantum 2626: An 8-in/8-out audio interface with the option for ADAT expansion.</li> <li>Behringer X-touch: A USB/MIDI fader controller used for controlling REAPER's mixer, transport, and plugin parameters via the DrivenByMoss extension.</li> <li>Touchscreen Monitor: Connected to the Mac while it is in clamshell mode.</li> <li>Analog Sources:<ul> <li>A turntable with a built-in phono preamp.</li> <li>Guitar</li> <li>Bass</li> <li>4 Microphones</li> </ul> </li> <li>Digital Sources:<ul> <li>USB MIDI Keyboard</li> </ul> </li> </ul>"},{"location":"documentation/REAPER/current-setup/#system-flow-graph","title":"System Flow Graph","text":"<p>This diagram illustrates how power, audio, and data signals are routed through the system.</p> <pre><code>graph TD\n    %% Define Styles\n    classDef hardware fill:#eceff100,stroke:#607d8b,stroke-width:2px\n    classDef computer fill:#e3f2fd00,stroke:#1565c0,stroke-width:2px\n    classDef interface fill:#e0f2f100,stroke:#00695c,stroke-width:2px,font-weight:bold\n    classDef power fill:#fff3e000,stroke:#ef6c00,stroke-width:2px\n\n    %% Power Source\n    Wall[Wall Outlet] --&gt; Furman[&lt;b&gt;Furman Power Conditioner&lt;/b&gt;]\n    Wall --&gt; Mac[\ud83d\udcbb Mac]\n\n    %% Powered Peripherals\n    Furman -- Power --&gt; Q[&lt;b&gt;PreSonus Quantum 2626&lt;/b&gt;]\n    Furman -- Power --&gt; Mon[\ud83d\udda5\ufe0f External Monitor]\n    Furman -- Power --&gt; X[&lt;b&gt;Behringer X-touch] -- USB --&gt; Mac\n\n    %% Audio Inputs\n    A[\ud83c\udfa4 Mics &amp; Instruments] -- Analog Signal --&gt; Q\n    T[Turntable] --&gt; S[S/PDIF Converter] -- S/PDIF --&gt; Q\n\n    %% Data Connections\n    Q -- Thunderbolt 3 --&gt; Mac\n    K[USB MIDI Keyboard] -- USB --&gt; Mac\n    Mac -- Video Signal --&gt; Mon\n\n    %% Apply Styles\n    class Furman,Wall power\n    class A,T,S,X,Mon,K hardware\n    class Mac computer\n    class Q interface</code></pre>"},{"location":"documentation/REAPER/current-setup/#workflow-procedures","title":"\u2699\ufe0f Workflow &amp; Procedures","text":"<p>The setup is designed around a simple, two-step process for both starting and stopping a session.</p>"},{"location":"documentation/REAPER/current-setup/#startup-procedure","title":"Startup Procedure","text":"<ol> <li>Flip the switch on the Furman Power Conditioner. This provides power to the audio interface, monitor, and all other connected peripherals.</li> <li>Click the mouse or press a key on the keyboard. This wakes the Mac from sleep.</li> <li>The Hammerspoon script automatically detects that the Quantum 2626 has reconnected and will launch REAPER. The system is now ready to use.</li> </ol>"},{"location":"documentation/REAPER/current-setup/#shutdown-procedure","title":"Shutdown Procedure","text":"<ol> <li>(Optional but Recommended) Save your current project in REAPER.</li> <li>Flip the switch on the Furman Power Conditioner.</li> <li>This cuts power to the Quantum 2626, which triggers the Hammerspoon script. The script automatically saves the project again, quits REAPER, and puts the Mac to sleep.</li> </ol>"},{"location":"documentation/REAPER/current-setup/#adding-a-midi-device","title":"Adding a MIDI Device","text":"<p>If you connect a new MIDI controller while REAPER is already running:</p> <ul> <li>Click the \"Reset MIDI\" button in the custom \"Big Buttons\" UI to force REAPER to rescan and recognize the new device.</li> </ul>"},{"location":"documentation/REAPER/current-setup/#software-installation","title":"\ud83d\udcbb Software Installation","text":"<p>This section covers the installation and configuration of all essential software components. We'll use Homebrew for installations on macOS where possible.</p>"},{"location":"documentation/REAPER/current-setup/#1-system-level-tools","title":"1. System-Level Tools","text":"<p>Hammerspoon is the core of the system-level automation.</p> <ul> <li> <p>Official Website: hammerspoon.org</p> </li> <li> <p>Installation (macOS): Open a terminal and run:</p> <pre><code>brew install --cask hammerspoon\n</code></pre> <ul> <li>After installation, launch Hammerspoon. It will create a configuration directory at <code>~/.hammerspoon/</code>. This is where the automation script will live.</li> </ul> </li> </ul>"},{"location":"documentation/REAPER/current-setup/#2-reaper-and-essential-extensions","title":"2. REAPER and Essential Extensions","text":""},{"location":"documentation/REAPER/current-setup/#a-install-reaper","title":"A. Install REAPER","text":"<ul> <li>Download and install the latest version of REAPER from the official website: reaper.fm.</li> </ul>"},{"location":"documentation/REAPER/current-setup/#b-install-drivenbymoss-manual-installation","title":"B. Install DrivenByMoss (Manual Installation)","text":"<p>Unlike many other extensions, DrivenByMoss cannot be installed with ReaPack and requires a manual setup.</p> <ul> <li>Official Website: mossgrabers.de/Software/Reaper</li> </ul> <p>Installation Steps:</p> <ol> <li>Download the latest version of DrivenByMoss for macOS from the official website.</li> <li>In REAPER, go to the <code>Options</code> menu and select <code>Show REAPER resource path in explorer/finder...</code>.</li> <li>Navigate into the <code>UserPlugins</code> folder.</li> <li>Unzip the downloaded file and copy its entire contents into the <code>UserPlugins</code> folder.</li> <li>Restart REAPER to load the extension.</li> </ol> <p>Configuration Steps:</p> <ol> <li>In REAPER, go to <code>Preferences &gt; Control/OSC/web</code>.</li> <li>Click the <code>Add</code> button.</li> <li>From the Control surface mode dropdown menu, select <code>DrivenByMoss</code>.</li> <li>Set the MIDI input and MIDI output to your Behringer X-touch (or other control surface).</li> <li>Click <code>OK</code> to save the settings. The control surface should now be active.</li> </ol>"},{"location":"documentation/REAPER/current-setup/#c-install-reapack","title":"C. Install ReaPack","text":"<p>ReaPack is a package manager for REAPER that automates the installation of scripts, extensions, and themes.</p> <ul> <li>Official Website: reapack.com</li> <li>Installation Steps:<ol> <li>Download the appropriate <code>.dylib</code> file for your macOS architecture (Apple Silicon or Intel) from the ReaPack website.</li> <li>In REAPER, go to the <code>Options</code> menu and select <code>Show REAPER resource path in explorer/finder...</code>.</li> <li>Open the <code>UserPlugins</code> folder.</li> <li>Copy the downloaded <code>.dylib</code> file into this folder.</li> <li>Restart REAPER. ReaPack will now be available under the <code>Extensions</code> menu.</li> </ol> </li> </ul>"},{"location":"documentation/REAPER/current-setup/#d-install-additional-extensions-via-reapack","title":"D. Install Additional Extensions via ReaPack","text":"<p>Now, use ReaPack to install the remaining tools.</p> <p>Install Packages:</p> <ol> <li>Go to <code>Extensions</code> &gt; <code>ReaPack</code> &gt; <code>Browse packages...</code>.</li> <li>In the filter box, search for and install each of the following packages by right-clicking and choosing <code>Install</code>:<ul> <li>SWS/S\\&amp;M Extension: A massive extension that adds hundreds of new actions and features.</li> <li>ReaImGui: A library that allows ReaScripts to create complex graphical user interfaces.</li> </ul> </li> <li>After selecting the packages, click <code>Apply</code> to install them.</li> <li>Restart REAPER to complete the installation.</li> </ol>"},{"location":"documentation/REAPER/current-setup/#automation-control-layer","title":"\ud83e\udd16 Automation &amp; Control Layer","text":""},{"location":"documentation/REAPER/current-setup/#quantum-2626-system-automation","title":"Quantum 2626 &amp; System Automation","text":"<p>The entire system is automated to power on and off based on the connection status of the Quantum 2626 interface. This is handled by a Hammerspoon script.</p> <ul> <li>Functionality:<ul> <li>When power to the Quantum 2626 is cut (via the Furman), the script begins a countdown.</li> <li>It then automatically saves and quits REAPER, then puts the computer to sleep.</li> <li>When the computer wakes up and the Quantum 2626 is detected, the script automatically launches REAPER.</li> </ul> </li> <li>Full Documentation &amp; Script:<ul> <li>See the detailed documentation for the Quantum &amp; REAPER Automation script here.</li> </ul> </li> </ul>"},{"location":"documentation/REAPER/current-setup/#reaper-control-custom-ui","title":"REAPER Control &amp; Custom UI","text":""},{"location":"documentation/REAPER/current-setup/#drivenbymoss-control-surface","title":"DrivenByMoss Control Surface","text":"<p>The DrivenByMoss extension provides deep integration for MIDI controllers like the Behringer X-touch. It adds more functionality and has good defaults.</p> <ul> <li>Official Website: mossgrabers.de/Software/Reaper/Reaper.html</li> </ul>"},{"location":"documentation/REAPER/current-setup/#big-buttons-reascript","title":"Big Buttons ReaScript","text":"<p>This is a custom ReaImGui script that creates a simple window inside REAPER with large, easy-to-click buttons for common actions like refreshing audio devices or MIDI controllers.</p> <ul> <li>Note: This script is a temporary solution and is planned to be replaced by a more advanced, fully customizable UI built with my Control-Canvas script.</li> <li>Full Documentation &amp; Script:<ul> <li>See the detailed documentation for the Big Buttons ReaScript here.</li> </ul> </li> </ul>"},{"location":"documentation/REAPER/plugins/","title":"\ud83c\udfb9 REAPER Plugins &amp; Resources","text":"<p>A list of my prefered plugins for music production in REAPER, along with sample libraries and other resources.</p> Icon Platform Windows (VST/VST3) macOS (AU/VST/VST3) Linux (VST/VST3)"},{"location":"documentation/REAPER/plugins/#effects-plugins","title":"\ud83c\udf9b\ufe0f Effects Plugins","text":"<ul> <li> <p> Valhalla Supermassive: A famously lush and versatile reverb/delay plugin known for its massive, otherworldly soundscapes. Completely free.</p> </li> <li> <p> TAL-Chorus-LX: An emulation of the iconic Roland JUNO-60 stereo chorus, known for its simple operation and rich, classic sound on guitars, synths, and vocals.</p> </li> <li> <p> Basslane: A simple but powerful utility for controlling the stereo width of low frequencies, allowing you to make your bass mono below a set crossover point for a tighter mix.</p> </li> <li> <p> Tonocracy: A free, modern guitar amp and effects modeling suite that uses neural network technology. It can run standalone or as a plugin and supports third-party Neural Amp Models (NAM) and IRs.</p> </li> <li> <p> MuseFX: A free suite of essential audio effects plugins developed by the team behind MuseScore and Audacity, offering tools like reverb, delay, compression, and more.</p> </li> </ul>"},{"location":"documentation/REAPER/plugins/#instruments-samplers","title":"\ud83c\udfb9 Instruments &amp; Samplers","text":"<ul> <li> Decent Sampler: A free, lightweight sample player plugin that supports a wide range of community-created instruments, most notably from the Pianobook library.</li> </ul>"},{"location":"documentation/REAPER/plugins/#sample-libraries-resources","title":"\ud83d\udcda Sample Libraries &amp; Resources","text":"<ul> <li>Pianobook: A community-driven project featuring a massive collection of free, unique, and characterful sample libraries, primarily for the Decent Sampler format.</li> </ul>"},{"location":"documentation/REAPER/Scripts/big-buttons-reascript/","title":"ReaScript: Big Buttons UI","text":"<p>This document details the \"Big Buttons\" ReaScript, a custom tool designed to provide a simple, dockable user interface within REAPER for triggering actions.</p>"},{"location":"documentation/REAPER/Scripts/big-buttons-reascript/#overview","title":"Overview","text":"<p>This script uses the ReaImGui library to create a window with large, easy-to-click buttons. It is configurable through a built-in settings panel, allowing you to create a custom list of actions buttons, such as refreshing audio and MIDI devices.</p> <p>I am planning to eventually replace it with the more advanced, Control-Canvas project, but it is still in development.</p>"},{"location":"documentation/REAPER/Scripts/big-buttons-reascript/#core-features","title":"Core Features","text":"<ul> <li>Dockable Window: Can be docked in any of REAPER's docker positions.</li> <li>Configurable: Add, remove, re-label, and re-colorize buttons from a built-in settings window.</li> <li>Actions: Buttons can trigger any REAPER action using its native number or its named command ID (e.g., <code>_SWS_ABOUT</code>).</li> <li>Toggle State Highlighting: Buttons for toggle actions (like Metronome or Repeat) change color to reflect their on/off state.</li> <li>External Configuration: All settings (buttons, sizes, colors) are saved to an external <code>.cfg</code> file, making your layout portable and easy to back up.</li> </ul>"},{"location":"documentation/REAPER/Scripts/big-buttons-reascript/#installation-usage","title":"Installation &amp; Usage","text":""},{"location":"documentation/REAPER/Scripts/big-buttons-reascript/#prerequisites","title":"Prerequisites","text":"<ol> <li>ReaPack: Must be installed.</li> <li>ReaImGui: Must be installed via ReaPack.</li> </ol> <p>(See the main Current Setup page for instructions on installing these prerequisites).</p>"},{"location":"documentation/REAPER/Scripts/big-buttons-reascript/#installation-steps","title":"Installation Steps","text":"<ol> <li>In REAPER, go to the <code>Options</code> menu and select <code>Show REAPER resource path in explorer/finder...</code>.</li> <li>Open the <code>Scripts</code> folder.</li> <li>Save the code below into a new file inside the <code>Scripts</code> folder. Name it something memorable, like <code>Big Buttons.lua</code>.</li> <li>In REAPER, go to <code>Actions</code> &gt; <code>Show action list...</code>.</li> <li>Click <code>New action...</code> &gt; <code>Load ReaScript...</code>.</li> <li>Select <code>Big Buttons.lua</code> and click <code>Open</code>.</li> </ol>"},{"location":"documentation/REAPER/Scripts/big-buttons-reascript/#running-the-script","title":"Running the Script","text":"<ol> <li>In REAPER, go to <code>Actions</code> &gt; <code>Show action list...</code>.</li> <li>In the filter box, type the name of your script file (e.g., \"Big Buttons\").</li> <li>Select the script and click <code>Run</code>.</li> <li>For easy access, you can assign the script to a toolbar button or a keyboard shortcut by clicking the <code>Add...</code> button in the bottom left of the Action List window.</li> </ol>"},{"location":"documentation/REAPER/Scripts/big-buttons-reascript/#configuration","title":"Configuration","text":"<p>All configuration is handled through the script's graphical interface.</p> <ul> <li>To access the settings, click <code>Options</code> &gt; <code>Settings...</code> in the menu bar of the \"Big Buttons\" window.</li> <li>The script will automatically create a <code>Big Buttons.cfg</code> file in the same <code>Scripts</code> directory to store your layout and color preferences. You do not need to edit this file manually.</li> </ul>"},{"location":"documentation/REAPER/Scripts/big-buttons-reascript/#complete-big-buttonslua-script","title":"Complete <code>Big Buttons.lua</code> Script","text":"<pre><code>--[[\nBig Buttons (dockable) \u2013 ReaImGui script for REAPER\nAuthor: Max\nVersion: 2.0 (With external settings file and editor)\n\nWhat it does:\n- Creates a dockable ImGui window with large, easy-to-click buttons.\n- Buttons are now fully configurable via a Settings window.\n- Each button runs a REAPER action (native ID or named command).\n- Optional highlight for toggle-type actions.\n- Configuration (buttons, sizes) is saved to a .cfg file.\n- Optionally docks itself the first time it runs.\n\nRequirements:\n- ReaImGui (reaimgui) by cfillion installed ([https://github.com/cfillion/reaimgui](https://github.com/cfillion/reaimgui))\n- This script is plain Lua. Save it as a ReaScript and run from REAPER.\n\nHow to Configure:\n- In the script window, go to \"Options\" -&gt; \"Settings...\" to open the editor.\n- Add, remove, or change buttons. Changes are saved automatically.\n--]]\n\n-- ============================================================================\n-- Default Config (used only if .cfg file is missing)\n-- ============================================================================\n\nlocal WINDOW_TITLE = \"Big Buttons\"\nlocal DEFAULT_DOCKER_ID = -1 -- REAPER docker 1 (-1..-16). Only first run.\nlocal TRUE_DEFAULT_COLOR_OFF = 0x25466EFF\nlocal TRUE_DEFAULT_COLOR_ON = 0x2E7D32FF\n\n-- Default UI settings\nlocal DEFAULT_UI = {\n    font_size = 24,\n    btn_w = 180,\n    btn_h = 64,\n    first_run = true,\n    show_settings = false,\n    next_uid = 100,\n    always_on_top = false,\n    settings_font_size = 16,\n    title_font_size = 18, -- &lt;&lt;&lt; ADD THIS\n    default_color_off = TRUE_DEFAULT_COLOR_OFF,\n    default_color_on = TRUE_DEFAULT_COLOR_ON,\n    color_bg = nil,\n    color_titlebar = nil\n}\n\n-- Default buttons (only used on the very first run)\nlocal DEFAULT_ACTIONS = {\n    { uid = 1, label = \"Record\",    cmd = \"1013\",       toggle = false, color_off = nil, color_on = 0x2E7D32FF },\n    { uid = 2, label = \"Play\",      cmd = \"40044\",      toggle = false, color_off = nil, color_on = 0x2E7D32FF },\n    { uid = 3, label = \"Stop\",      cmd = \"1016\",       toggle = false, color_off = nil, color_on = 0x2E7D32FF },\n    { uid = 4, label = \"Repeat\",    cmd = \"1068\",       toggle = true,  color_off = nil, color_on = 0x2E7D32FF },\n    { uid = 5, label = \"Save\",      cmd = \"40026\",      toggle = false, color_off = nil, color_on = 0x2E7D32FF },\n    { uid = 6, label = \"Metronome\", cmd = \"40364\",      toggle = true,  color_off = nil, color_on = 0x2E7D32FF },\n    { uid = 7, label = \"SWS About\", cmd = \"_SWS_ABOUT\", toggle = false, color_off = nil, color_on = 0x2E7D32FF }\n}\n\n-- ============================================================================\n-- Minimal boilerplate\n-- ============================================================================\n\npackage.path = reaper.ImGui_GetBuiltinPath() .. \"/?.lua\"\nlocal ImGui = require(\"imgui\")(\"0.10\")\n\nlocal ctx = ImGui.CreateContext(WINDOW_TITLE)\n\n-- Runtime state (loaded from file)\nlocal ui = {}\nlocal ACTIONS = {}\nlocal pending_deletions = {}\n\n-- ============================================================================\n-- File and Settings Management\n-- ============================================================================\n\n-- Get the path for our .cfg file\nlocal SCRIPT_PATH = debug.getinfo(1, \"S\").source:sub(2)\nlocal CFG_PATH = SCRIPT_PATH:gsub(\"%.lua$\", \".cfg\")\n\n-- Serializes a Lua table into a string that can be executed\nlocal function serialize(data)\n    local s = \"return {\\n\"\n\n    -- Serialize UI settings\n    s = s .. \"  ui = {\\n\"\n    for k, v in pairs(data.ui) do\n        -- ### Handle custom color nils ###\n        if k == 'color_bg' or k == 'color_titlebar' then\n            s = s .. string.format(\"    %s = %s,\\n\", k, v and string.format(\"0x%X\", v) or \"nil\")\n        elseif type(v) == \"string\" then\n            s = s .. string.format(\"    %s = [[%s]],\\n\", k, v)\n        elseif type(v) == \"boolean\" then\n            s = s .. string.format(\"    %s = %s,\\n\", k, tostring(v))\n        else\n            s = s .. string.format(\"    %s = %s,\\n\", k, v)\n        end\n    end\n    s = s .. \"  },\\n\"\n\n    -- Serialize Actions (unchanged from before)\n    s = s .. \"  actions = {\\n\"\n    for _, action in ipairs(data.actions) do\n        s = s .. \"    {\\n\"\n        s = s .. string.format(\"      uid = %d,\\n\", action.uid)\n        s = s .. string.format(\"      label = [[%s]],\\n\", action.label)\n        s = s .. string.format(\"      cmd = [[%s]],\\n\", action.cmd)\n        s = s .. string.format(\"      toggle = %s,\\n\", tostring(action.toggle))\n        s = s .. string.format(\"      color_off = %s,\\n\", action.color_off and string.format(\"0x%X\", action.color_off) or \"nil\")\n        s = s .. string.format(\"      color_on = 0x%X,\\n\", action.color_on)\n        s = s .. \"    },\\n\"\n    end\n    s = s .. \"  }\\n\"\n\n    s = s .. \"}\\n\"\n    return s\nend\n\nlocal function save_settings()\n    local file = io.open(CFG_PATH, \"w\")\n    if file then\n        local data_to_save = { ui = ui, actions = ACTIONS }\n        file:write(serialize(data_to_save))\n        file:close()\n    else\n        reaper.ShowMessageBox(\"Failed to save settings to:\\n\" .. CFG_PATH, \"Big Buttons Error\", 0)\n    end\nend\n\nlocal function load_settings()\n    local file = io.open(CFG_PATH, \"r\")\n    if file then\n        file:close()\n        local data = dofile(CFG_PATH)\n        if data and data.ui and data.actions then\n            ui = data.ui\n            ACTIONS = data.actions\n            -- Ensure settings flag is always false on start\n            ui.show_settings = false\n\n            -- ### BACKWARD COMPATIBILITY ###\n            if ui.always_on_top == nil then ui.always_on_top = false end\n            if ui.settings_font_size == nil then ui.settings_font_size = DEFAULT_UI.settings_font_size end\n            if ui.title_font_size == nil then ui.title_font_size = DEFAULT_UI.title_font_size end\n            if ui.default_color_off == nil then ui.default_color_off = TRUE_DEFAULT_COLOR_OFF end\n            if ui.default_color_on == nil then ui.default_color_on = TRUE_DEFAULT_COLOR_ON end\n            if ui.color_bg == nil then ui.color_bg = nil end\n            if ui.color_titlebar == nil then ui.color_titlebar = nil end\n            for _, action in ipairs(ACTIONS) do\n                if action.color_off == nil and action.color_on == nil then\n                    action.color_off = nil\n                    action.color_on = ui.default_color_on\n                end\n            end\n            return\n        end\n    end\n\n    -- If file doesn't exist or is invalid, use defaults\n    for k, v in pairs(DEFAULT_UI) do ui[k] = v end\n    for _, action in ipairs(DEFAULT_ACTIONS) do table.insert(ACTIONS, action) end\n    save_settings() -- Create the first config file\nend\n\n-- ============================================================================\n-- Utilities\n-- ============================================================================\n\nlocal function resolve_cmd_id(cmd)\n    local num = tonumber(cmd)\n    if num then\n        return num\n    elseif type(cmd) == \"string\" and cmd ~= \"\" then\n        return reaper.NamedCommandLookup(cmd)\n    end\n    return 0\nend\n\nlocal function is_toggle_on(cmd_id)\n    if not cmd_id or cmd_id &lt;= 0 then return false end\n    return reaper.GetToggleCommandState(cmd_id) == 1\nend\n\nlocal function run_action(cmd)\n    local id = resolve_cmd_id(cmd)\n    if id and id &gt; 0 then\n        reaper.Main_OnCommand(id, 0)\n    else\n        reaper.ShowMessageBox(\n            string.format(\"Invalid command ID for button: '%s'\", tostring(cmd)),\n            WINDOW_TITLE,\n            0\n        )\n    end\nend\n\n-- ============================================================================\n-- UI\n-- ============================================================================\n\nlocal function draw_settings_window()\n    if not ui.show_settings then return end\n\n    -- Apply custom window colors\n    local pushed_colors = 0\n    if ui.color_bg then\n        ImGui.PushStyleColor(ctx, ImGui.Col_WindowBg, ui.color_bg)\n        pushed_colors = pushed_colors + 1\n    end\n    if ui.color_titlebar then\n        ImGui.PushStyleColor(ctx, ImGui.Col_TitleBgActive, ui.color_titlebar)\n        ImGui.PushStyleColor(ctx, ImGui.Col_TitleBg, ui.color_titlebar)\n        pushed_colors = pushed_colors + 2\n    end\n\n    ImGui.PushFont(ctx, nil, ui.title_font_size) -- Use new title font for settings window title\n\n    ImGui.SetNextWindowSize(ctx, 700, 500, ImGui.Cond_FirstUseEver)\n    local visible, show_window_updated = ImGui.Begin(ctx, \"Button Settings\", ui.show_settings)\n    ui.show_settings = show_window_updated\n\n    ImGui.PopFont(ctx) -- Pop title font, switch to content font below\n\n    if visible then\n        ImGui.PushFont(ctx, nil, ui.settings_font_size) -- Use settings content font\n        if ImGui.BeginTabBar(ctx, \"SettingsTabs\") then\n            -- ### BUTTONS TAB ###\n            if ImGui.BeginTabItem(ctx, \"Buttons\") then\n                local footer_height = ImGui.GetStyleVar(ctx, ImGui.StyleVar_ItemSpacing) + ImGui.GetFrameHeightWithSpacing(ctx)\n                if ImGui.BeginChild(ctx, \"SettingsScrollingRegion\", 0, -footer_height) then\n                    local action_to_delete = nil\n                    local needs_save = false\n                    if ImGui.BeginTable(ctx, \"settings_table\", 6, ImGui.TableFlags_Borders | ImGui.TableFlags_Resizable | ImGui.TableFlags_ScrollY) then\n                        ImGui.TableSetupColumn(ctx, \"Label\"); ImGui.TableSetupColumn(ctx, \"Command ID\"); ImGui.TableSetupColumn(ctx, \"Toggle?\", ImGui.TableColumnFlags_WidthFixed, 60); ImGui.TableSetupColumn(ctx, \"Color Off\", ImGui.TableColumnFlags_WidthFixed, 95); ImGui.TableSetupColumn(ctx, \"Color On\", ImGui.TableColumnFlags_WidthFixed, 95); ImGui.TableSetupColumn(ctx, \"Actions\", ImGui.TableColumnFlags_WidthFixed, 80); ImGui.TableHeadersRow(ctx)\n                        for i, action in ipairs(ACTIONS) do\n                            ImGui.PushID(ctx, action.uid)\n                            ImGui.TableNextRow(ctx)\n                            ImGui.TableNextColumn(ctx); ImGui.SetNextItemWidth(ctx, -1); local l_ch, l_new = ImGui.InputText(ctx, \"##label\", action.label); if l_ch then action.label = l_new; needs_save = true end\n                            ImGui.TableNextColumn(ctx); ImGui.SetNextItemWidth(ctx, -1); local c_ch, c_new = ImGui.InputText(ctx, \"##cmd\", action.cmd);   if c_ch then action.cmd = c_new; needs_save = true end\n                            ImGui.TableNextColumn(ctx); local t_ch, t_new = ImGui.Checkbox(ctx, \"##toggle\", action.toggle); if t_ch then action.toggle = t_new; needs_save = true end\n                            ImGui.TableNextColumn(ctx); local co_ch, co_new = ImGui.ColorEdit4(ctx, \"##off\", action.color_off or ui.default_color_off, ImGui.ColorEditFlags_NoInputs | ImGui.ColorEditFlags_AlphaBar); if co_ch then action.color_off = co_new; needs_save = true end\n                            ImGui.SameLine(ctx); if ImGui.Button(ctx, \"(R)##off\") then action.color_off = nil; needs_save = true end; ImGui.SetItemTooltip(ctx, \"Reset to default 'off' color\")\n                            ImGui.TableNextColumn(ctx); local cn_ch, cn_new = ImGui.ColorEdit4(ctx, \"##on\", action.color_on or ui.default_color_on, ImGui.ColorEditFlags_NoInputs | ImGui.ColorEditFlags_AlphaBar); if cn_ch then action.color_on = cn_new; needs_save = true end\n                            ImGui.SameLine(ctx); if ImGui.Button(ctx, \"(R)##on\") then action.color_on = ui.default_color_on; needs_save = true end; ImGui.SetItemTooltip(ctx, \"Reset to default 'on' color\")\n                            ImGui.TableNextColumn(ctx);\n                            local is_pending_delete = pending_deletions[action.uid]\n                            if is_pending_delete then\n                                if ImGui.GetTime(ctx) &gt; is_pending_delete + 3.0 then pending_deletions[action.uid] = nil\n                                else\n                                    local col, colH, colA = 0xB71C1CFF, 0xC62828FF, 0xD32F2FFF\n                                    ImGui.PushStyleColor(ctx, ImGui.Col_Button, col); ImGui.PushStyleColor(ctx, ImGui.Col_ButtonHovered, colH); ImGui.PushStyleColor(ctx, ImGui.Col_ButtonActive, colA)\n                                    if ImGui.Button(ctx, \"Confirm\") then action_to_delete = i; needs_save = true; pending_deletions[action.uid] = nil end\n                                    ImGui.PopStyleColor(ctx, 3)\n                                end\n                            end\n                            if not pending_deletions[action.uid] then\n                                if ImGui.Button(ctx, \"Delete\") then pending_deletions[action.uid] = ImGui.GetTime(ctx) end\n                            end\n                            ImGui.PopID(ctx)\n                        end\n                        ImGui.EndTable(ctx)\n                    end\n                    if action_to_delete then table.remove(ACTIONS, action_to_delete) end\n                    if needs_save then save_settings() end\n                end\n                ImGui.EndChild(ctx)\n                if ImGui.Button(ctx, \"Add New Button\") then\n                    table.insert(ACTIONS, { uid = ui.next_uid, label = \"New Button\", cmd = \"\", toggle = false, color_off = nil, color_on = ui.default_color_on })\n                    ui.next_uid = ui.next_uid + 1\n                    save_settings()\n                end\n                ImGui.EndTabItem(ctx)\n            end\n\n            -- ### UI SETTINGS TAB ###\n            if ImGui.BeginTabItem(ctx, \"UI Settings\") then\n                ImGui.SeparatorText(ctx, \"Sizing\")\n                ImGui.SetNextItemWidth(ctx, 150); local tfs_ch, tfs = ImGui.SliderInt(ctx, \"Title/Menu font size\", ui.title_font_size, 10, 48, \"%d px\"); if tfs_ch then ui.title_font_size = tfs; save_settings() end\n                ImGui.SameLine(ctx); if ImGui.Button(ctx, \"Reset##tfs\") then ui.title_font_size = DEFAULT_UI.title_font_size; save_settings() end\n                ImGui.SetNextItemWidth(ctx, 150); local sfs_ch, sfs = ImGui.SliderInt(ctx, \"Settings font size\", ui.settings_font_size, 10, 32, \"%d px\"); if sfs_ch then ui.settings_font_size = sfs; save_settings() end\n                ImGui.SameLine(ctx); if ImGui.Button(ctx, \"Reset##sfs\") then ui.settings_font_size = DEFAULT_UI.settings_font_size; save_settings() end\n                ImGui.SetNextItemWidth(ctx, 150); local fs_ch, fs = ImGui.SliderInt(ctx, \"Content font size\", ui.font_size, 10, 64, \"%d px\"); if fs_ch then ui.font_size = fs; save_settings() end\n                ImGui.SameLine(ctx); if ImGui.Button(ctx, \"Reset##fs\") then ui.font_size = DEFAULT_UI.font_size; save_settings() end\n                ImGui.SetNextItemWidth(ctx, 150); local bw_ch, bw = ImGui.SliderInt(ctx, \"Button width\", ui.btn_w, 80, 400, \"%d px\"); if bw_ch then ui.btn_w = bw; save_settings() end\n                ImGui.SameLine(ctx); if ImGui.Button(ctx, \"Reset##bw\") then ui.btn_w = DEFAULT_UI.btn_w; save_settings() end\n                ImGui.SetNextItemWidth(ctx, 150); local bh_ch, bh = ImGui.SliderInt(ctx, \"Button height\", ui.btn_h, 40, 240, \"%d px\"); if bh_ch then ui.btn_h = bh; save_settings() end\n                ImGui.SameLine(ctx); if ImGui.Button(ctx, \"Reset##bh\") then ui.btn_h = DEFAULT_UI.btn_h; save_settings() end\n\n                ImGui.SeparatorText(ctx, \"Default Button Colors\")\n                local dco_ch, dco_new = ImGui.ColorEdit4(ctx, \"Default Off Color\", ui.default_color_off, ImGui.ColorEditFlags_AlphaBar)\n                if dco_ch then ui.default_color_off = dco_new; save_settings() end\n                ImGui.SameLine(ctx); if ImGui.Button(ctx, \"Reset##dco\") then ui.default_color_off = TRUE_DEFAULT_COLOR_OFF; save_settings() end\n\n                local dcn_ch, dcn_new = ImGui.ColorEdit4(ctx, \"Default On Color\", ui.default_color_on, ImGui.ColorEditFlags_AlphaBar)\n                if dcn_ch then ui.default_color_on = dcn_new; save_settings() end\n                ImGui.SameLine(ctx); if ImGui.Button(ctx, \"Reset##dcn\") then ui.default_color_on = TRUE_DEFAULT_COLOR_ON; save_settings() end\n\n                ImGui.SeparatorText(ctx, \"Window Colors\")\n                local bg_ch, bg_new = ImGui.ColorEdit4(ctx, \"Background Color\", ui.color_bg or 0, ImGui.ColorEditFlags_AlphaBar)\n                if bg_ch then ui.color_bg = bg_new; save_settings() end\n                ImGui.SameLine(ctx); if ImGui.Button(ctx, \"Reset##bg\") then ui.color_bg = nil; save_settings() end\n\n                local tb_ch, tb_new = ImGui.ColorEdit4(ctx, \"Title Bar Color\", ui.color_titlebar or 0, ImGui.ColorEditFlags_AlphaBar)\n                if tb_ch then ui.color_titlebar = tb_new; save_settings() end\n                ImGui.SameLine(ctx); if ImGui.Button(ctx, \"Reset##tb\") then ui.color_titlebar = nil; save_settings() end\n\n                ImGui.EndTabItem(ctx)\n            end\n\n            ImGui.EndTabBar(ctx)\n        end\n        ImGui.PopFont(ctx) -- Pop content font\n        ImGui.End(ctx)\n    end\n\n    -- Pop custom window colors\n    if pushed_colors &gt; 0 then\n        ImGui.PopStyleColor(ctx, pushed_colors)\n    end\nend\n\nlocal function draw_menu_bar()\n    if ImGui.BeginMenuBar(ctx) then\n        if ImGui.BeginMenu(ctx, \"Options\") then\n            if ImGui.MenuItem(ctx, \"Settings...\") then\n                ui.show_settings = not ui.show_settings\n            end\n\n            ImGui.Separator(ctx)\n\n            local toggled, new_state = ImGui.MenuItem(ctx, \"Always on top\", nil, ui.always_on_top)\n            if toggled then\n                ui.always_on_top = new_state\n                save_settings()\n            end\n\n            ImGui.EndMenu(ctx)\n        end\n        ImGui.EndMenuBar(ctx)\n    end\nend\n\nlocal function draw_buttons_grid()\n    -- Helper to generate brighter/darker shades for button states\n    local function generate_button_colors(base_color)\n        local r = (base_color &gt;&gt; 24) &amp; 0xFF; local g = (base_color &gt;&gt; 16) &amp; 0xFF; local b = (base_color &gt;&gt; 8) &amp; 0xFF; local a = base_color &amp; 0xFF\n        local function clamp(val) return math.max(0, math.min(255, val)) end\n        local col_h = (clamp(r + 20) &lt;&lt; 24) | (clamp(g + 20) &lt;&lt; 16) | (clamp(b + 20) &lt;&lt; 8) | a\n        local col_a = (clamp(r - 20) &lt;&lt; 24) | (clamp(g - 20) &lt;&lt; 16) | (clamp(b - 20) &lt;&lt; 8) | a\n        return base_color, col_h, col_a\n    end\n\n    local spacing_x = select(1, ImGui.GetStyleVar(ctx, ImGui.StyleVar_ItemSpacing))\n    local avail_w = ImGui.GetContentRegionAvail(ctx)\n    local cols = math.max(1, math.floor((avail_w + spacing_x) / (ui.btn_w + spacing_x)))\n\n    if #ACTIONS &gt; 0 and ImGui.BeginTable(ctx, \"grid\", cols) then\n        for _, a in ipairs(ACTIONS) do\n            ImGui.PushID(ctx, a.uid)\n            ImGui.TableNextColumn(ctx)\n\n            local cmd_id = resolve_cmd_id(a.cmd)\n            local on = a.toggle and is_toggle_on(cmd_id)\n            local use_custom_color = false\n\n            local color_to_use = nil\n            if on then\n                color_to_use = a.color_on or ui.default_color_on\n            else\n                color_to_use = a.color_off or ui.default_color_off\n            end\n\n            if color_to_use then\n                local col, colH, colA = generate_button_colors(color_to_use)\n                ImGui.PushStyleColor(ctx, ImGui.Col_Button, col)\n                ImGui.PushStyleColor(ctx, ImGui.Col_ButtonHovered, colH)\n                ImGui.PushStyleColor(ctx, ImGui.Col_ButtonActive, colA)\n                use_custom_color = true\n            end\n\n            if ImGui.Button(ctx, a.label, ui.btn_w, ui.btn_h) then\n                run_action(a.cmd)\n            end\n\n            if use_custom_color then ImGui.PopStyleColor(ctx, 3) end\n            ImGui.PopID(ctx)\n        end\n        ImGui.EndTable(ctx)\n    end\nend\n-- ============================================================================\n-- Main loop\n-- ============================================================================\n\nload_settings()\n\nlocal function loop()\n    if ui.first_run then\n        ImGui.SetNextWindowDockID(ctx, DEFAULT_DOCKER_ID)\n        ui.first_run = false\n        save_settings()\n    end\n\n    -- Apply custom window colors\n    local pushed_colors = 0\n    if ui.color_bg then\n        ImGui.PushStyleColor(ctx, ImGui.Col_WindowBg, ui.color_bg)\n        pushed_colors = pushed_colors + 1\n    end\n    if ui.color_titlebar then\n        ImGui.PushStyleColor(ctx, ImGui.Col_TitleBgActive, ui.color_titlebar)\n        ImGui.PushStyleColor(ctx, ImGui.Col_TitleBg, ui.color_titlebar)\n        pushed_colors = pushed_colors + 2\n    end\n\n    -- ### Main \"Big Buttons\" Window ###\n    local window_flags = ImGui.WindowFlags_MenuBar\n    if ui.always_on_top then\n        window_flags = window_flags | ImGui.WindowFlags_TopMost\n    end\n\n    ImGui.PushFont(ctx, nil, ui.title_font_size) -- &lt;&lt; PUSH FONT FOR TITLE AND MENU\n    local visible, open = ImGui.Begin(ctx, WINDOW_TITLE, true, window_flags)\n\n    if visible then\n        draw_menu_bar()\n        ImGui.PopFont(ctx) -- &lt;&lt; POP FONT AFTER MENU BAR\n\n        ImGui.PushFont(ctx, nil, ui.font_size) -- &lt;&lt; PUSH FONT FOR BUTTONS\n        draw_buttons_grid()\n        ImGui.PopFont(ctx) -- &lt;&lt; POP FONT FOR BUTTONS\n\n        ImGui.End(ctx)\n    else\n        ImGui.PopFont(ctx) -- &lt;&lt; POP FONT IF WINDOW ISN'T VISIBLE\n    end\n\n    -- Pop custom window colors\n    if pushed_colors &gt; 0 then\n        ImGui.PopStyleColor(ctx, pushed_colors)\n    end\n\n    -- Settings Window (drawn as a separate window)\n    draw_settings_window()\n\n    if open then\n        reaper.defer(loop)\n    end\nend\n\nreaper.defer(loop)\n</code></pre>"},{"location":"documentation/REAPER/Scripts/quantum-reaper-automation/","title":"Hammerspoon: Quantum &amp; REAPER Automation","text":"<p>This is the <code>init.lua</code> script for Hammerspoon that provides the core automation for the studio workflow. Its primary purpose is to link the power state of the studio peripherals to the operational state of REAPER and the computer itself.</p>"},{"location":"documentation/REAPER/Scripts/quantum-reaper-automation/#overview","title":"Overview","text":"<p>The script constantly monitors the presence of the PreSonus Quantum 2626 audio interface. This connection status acts as a trigger for a chain of events, simplifying the startup and shutdown procedures of the entire audio setup.</p>"},{"location":"documentation/REAPER/Scripts/quantum-reaper-automation/#core-features","title":"Core Features","text":"<ul> <li>Automatic Sleep: When the Quantum 2626 is disconnected (e.g., by turning off the Furman power conditioner), a countdown begins.</li> <li>Graceful Exit: Before sleeping the computer, the script focuses REAPER, saves the current project, quits the application, then puts the computer to sleep.</li> <li>If the Quantum 2626 is turned on before the timer is finished, the countdown stops and everything returns to normal.</li> <li>User Prompt: A popup window appears during the countdown, showing the time remaining and allowing the user to either proceed immediately or cancel the shutdown.</li> <li>Automatic Startup: Upon waking the computer and detecting the Quantum 2626 has reconnected, the script automatically launches REAPER.</li> <li>Robustness: Includes retry logic for launching REAPER on wake and fallback detection to ensure reliability.</li> </ul>"},{"location":"documentation/REAPER/Scripts/quantum-reaper-automation/#installation","title":"Installation","text":"<ol> <li>Prerequisite: Ensure Hammerspoon is installed.</li> <li>Navigate to your Hammerspoon configuration directory, which is located at <code>~/.hammerspoon/</code>.</li> <li>Place the code below into a file named <code>init.lua</code> inside this directory. If you already have an <code>init.lua</code> file, you will need to merge this script's contents with your existing configuration.</li> <li>Select \"Reload Config\" from hammerspoons menu bar icon to activate the script.</li> </ol>"},{"location":"documentation/REAPER/Scripts/quantum-reaper-automation/#configuration","title":"Configuration","text":"<p>The script includes several variables at the top of the file that can be easily modified to suit your needs.</p> Variable Default Value Description <code>REAPER_APP</code> <code>\"REAPER\"</code> The name of the REAPER application. <code>REAPER_BUNDLE_ID</code> <code>\"com.cockos.reaper\"</code> The macOS bundle ID for REAPER, used for reliable launching. <code>COUNTDOWN_SECONDS</code> <code>300</code> The duration in seconds (5 minutes) before the script automatically saves REAPER and sleeps the computer. <code>POLL_INTERVAL</code> <code>2</code> The interval in seconds at which the script checks if the audio interface is connected. <code>WAKE_LAUNCH_DELAY</code> <code>7</code> The delay in seconds after the system wakes before the first attempt to launch REAPER. <code>TARGET_DEVICE_NAME_MATCHERS</code> <code>{ \"quantum 2626\", ... }</code> A list of case-insensitive text fragments to identify your audio interface by name. Add or change these if your device name is different."},{"location":"documentation/REAPER/Scripts/quantum-reaper-automation/#complete-initlua-script","title":"Complete <code>init.lua</code> Script","text":"<pre><code>-- init.lua (Hammerspoon)\nhs.console.clearConsole()\n\n-- ========================================\n-- REAPER + Quantum 2626 automation (v4)\n-- - Save + Quit REAPER on disconnect; sleep only after REAPER is gone\n-- - Only act on REAPER if already running (do NOT launch during save/quit)\n-- - Launch REAPER after wake with delayed retries\n-- - Fallback autolaunch on device reconnect after sleep\n-- - Wake window so reconnects shortly after wake trigger launch\n-- - Poll-based device detection with post-wake reinit\n-- ========================================\n\n-- ---------- Config ----------\nlocal REAPER_APP = \"REAPER\"\nlocal REAPER_BUNDLE_ID = \"com.cockos.reaper\"\n\nlocal COUNTDOWN_SECONDS = 300 -- 5 minutes\nlocal POLL_INTERVAL = 2 -- seconds\nlocal SLEEP_AFTER_ACTION = true\n\n-- Launch-on-wake behavior\nlocal WAKE_LAUNCH_DELAY = 7 -- seconds before first launch attempt\nlocal WAKE_LAUNCH_RETRY_DELAYS = { 14, 24 } -- seconds after wake for retries\nlocal LAUNCH_ONLY_IF_DEVICE_PRESENT = true -- launch only when Quantum is visible\nlocal RECONNECT_LAUNCH_WINDOW = 90 -- s; reconnects within this window after wake trigger launch\nlocal LAUNCH_ON_WAKE = true -- keep true to enable wake autolaunch\n\n-- Device matching by name substring (case-insensitive)\nlocal TARGET_DEVICE_NAME_MATCHERS = {\n  \"quantum 2626\",\n  \"presonus quantum 2626\",\n}\n\n-- Optional UID hints (case-insensitive substrings)\nlocal TARGET_UID_HINTS = {\n  -- \"qt4h20040939\",\n}\n\n-- ---------- State ----------\nlocal isConnected = false\nlocal popupWV = nil\nlocal popupTimer = nil\nlocal remaining = COUNTDOWN_SECONDS\nlocal ucc = nil\nlocal popupActive = false\nlocal dismissedUntilReconnect = false\n\nlocal pollTimer = nil\nlocal debounceTimer = nil\n\n-- Wake/autolaunch state\nlocal pendingReconnectAutolaunch = false\nlocal wakeHintUntil = 0\n\nlocal function now()\n  return hs.timer.secondsSinceEpoch()\nend\n\n-- ---------- Logging ----------\nlocal function log(fmt, ...)\n  hs.printf(\"Quantum2626: \" .. fmt, ...)\nend\n\n-- ---------- Device helpers ----------\nlocal function nameMatches(name)\n  local n = (name or \"\"):lower()\n  for _, pat in ipairs(TARGET_DEVICE_NAME_MATCHERS) do\n    if n:find(pat, 1, true) then\n      return true\n    end\n  end\n  return false\nend\n\nlocal function uidMatches(uid)\n  if not TARGET_UID_HINTS or #TARGET_UID_HINTS == 0 then\n    return false\n  end\n  local u = (uid or \"\"):lower()\n  for _, hint in ipairs(TARGET_UID_HINTS) do\n    hint = (hint or \"\"):lower()\n    if hint ~= \"\" and u:find(hint, 1, true) then\n      return true\n    end\n  end\n  return false\nend\n\nlocal function devicePresentNow()\n  local ok, devices = pcall(hs.audiodevice.allDevices)\n  if not ok or not devices then\n    return false\n  end\n  for _, dev in ipairs(devices) do\n    local okN, n = pcall(function()\n      return dev:name()\n    end)\n    local okU, u = pcall(function()\n      return dev:uid()\n    end)\n    if (okN and nameMatches(n)) or (okU and uidMatches(u)) then\n      return true\n    end\n  end\n  return false\nend\n\nlocal function listAudioDevices()\n  local ok, devices = pcall(hs.audiodevice.allDevices)\n  if not ok or not devices then\n    log(\"allDevices() failed or nil\")\n    return\n  end\n  log(\"--- Audio devices (%d) ---\", #devices)\n  for _, d in ipairs(devices) do\n    local n, u = \"\", \"\"\n    pcall(function()\n      n = d:name() or \"\"\n    end)\n    pcall(function()\n      u = d:uid() or \"\"\n    end)\n    log(\"  name='%s' uid='%s'\", n, u)\n  end\n  log(\"--------------------------\")\nend\n\n-- ---------- Webview/popup ----------\nlocal function cleanupUCC()\n  if ucc then\n    pcall(function()\n      ucc:delete()\n    end)\n    ucc = nil\n  end\nend\n\nlocal function destroyPopup()\n  log(\"Destroying popup\")\n  if popupTimer then\n    popupTimer:stop()\n    popupTimer = nil\n  end\n  if popupWV then\n    pcall(function()\n      popupWV:hide()\n    end)\n    pcall(function()\n      popupWV:delete()\n    end)\n    popupWV = nil\n  end\n  cleanupUCC()\n  popupActive = false\n  remaining = COUNTDOWN_SECONDS\nend\n\nlocal function centerFrame(width, height)\n  local screen = hs.screen.primaryScreen()\n  local f = screen:frame()\n  local x = f.x + (f.w - width) / 2\n  local y = f.y + (f.h - height) / 2\n  return hs.geometry.rect(x, y, width, height)\nend\n\nlocal function popupHTML(initialTime)\n  return [[\n&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\" /&gt;\n&lt;title&gt;REAPER Automation&lt;/title&gt;\n&lt;style&gt;\n  html, body { margin:0; padding:0; background:#1e1e1e; color:#fff;\n    font-family:-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n                  Helvetica, Arial, sans-serif; height:100vh; overflow:hidden; }\n  .wrap { box-sizing:border-box; width:100%; height:100%;\n          display:flex; align-items:center; justify-content:center;\n          padding:20px; }\n  .panel { width:100%; max-width:320px; border-radius:12px; background:#1f1f1f;\n           box-shadow:0 15px 35px rgba(0,0,0,0.4); padding:24px; text-align:center; }\n  .title { font-size:18px; font-weight:600; margin-bottom:8px; color:#fff; }\n  .msg { font-size:14px; line-height:1.4; opacity:0.9; margin:12px 0; }\n  .time { font-size:24px; font-weight:700; color:#4bd763; margin:16px 0;\n          font-family:monospace; text-shadow:0 2px 4px rgba(0,0,0,0.3); }\n  .btnrow { display:flex; gap:12px; justify-content:center; margin-top:20px; }\n  .btn { appearance:none; border:none; border-radius:8px; padding:10px 20px;\n         font-size:14px; font-weight:500; cursor:pointer; flex:1;\n         transition: all 0.2s ease; }\n  .continue { background:#0a84ff; color:#fff; }\n  .continue:hover { background:#007aff; }\n  .cancel { background:#3c3c43; color:#fff; }\n  .cancel:hover { background:#2c2c2e; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"wrap\"&gt;\n    &lt;div class=\"panel\"&gt;\n      &lt;div class=\"title\"&gt;Quantum 2626 Disconnected&lt;/div&gt;\n      &lt;div class=\"msg\"&gt;REAPER will be saved and closed:&lt;/div&gt;\n      &lt;div class=\"time\" id=\"timeLeft\"&gt;]] .. initialTime .. [[&lt;/div&gt;\n      &lt;div class=\"msg\"&gt;Continue now, or Cancel to abort.&lt;/div&gt;\n      &lt;div class=\"btnrow\"&gt;\n        &lt;button class=\"btn continue\" id=\"continueBtn\"&gt;Continue&lt;/button&gt;\n        &lt;button class=\"btn cancel\" id=\"cancelBtn\"&gt;Cancel&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;script&gt;\n  function init() {\n    const post = (action) =&gt; {\n      try {\n        if (window.webkit &amp;&amp; window.webkit.messageHandlers &amp;&amp;\n            window.webkit.messageHandlers.reaperPopup) {\n          window.webkit.messageHandlers.reaperPopup.postMessage({ action });\n        }\n      } catch(e) { /* no-op */ }\n    };\n    const c = document.getElementById('continueBtn');\n    const k = document.getElementById('cancelBtn');\n    if (c) c.addEventListener('click', (e) =&gt; { e.preventDefault(); post('continue'); });\n    if (k) k.addEventListener('click', (e) =&gt; { e.preventDefault(); post('cancel'); });\n    document.addEventListener('keydown', (e) =&gt; {\n      if (e.key === 'Enter' &amp;&amp; c) c.click();\n      if (e.key === 'Escape' &amp;&amp; k) k.click();\n    });\n    if (c) c.focus();\n  }\n  if (document.readyState === 'loading')\n    document.addEventListener('DOMContentLoaded', init);\n  else\n    init();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n  ]]\nend\n\nlocal function updateTimeLabel()\n  if not popupWV then\n    return\n  end\n  local m = math.floor(remaining / 60)\n  local s = remaining % 60\n  local t = string.format(\"%d:%02d\", m, s)\n  local color = remaining &lt;= 30 and \"#ff6b6b\" or \"#4bd763\"\n  local js = [[\n    (function(){\n      var el = document.getElementById('timeLeft');\n      if (!el) return;\n      el.textContent = ']] .. t .. [[';\n      el.style.color = ']] .. color .. [[';\n    })();\n  ]]\n  pcall(function()\n    popupWV:evaluateJavaScript(js)\n  end)\nend\n\n-- forward decl\nlocal saveQuitThenMaybeSleep\n\nlocal function startPopupTimer()\n  hs.timer.doAfter(0.5, updateTimeLabel)\n  popupTimer = hs.timer.new(1, function()\n    remaining = remaining - 1\n    if remaining &lt;= 0 then\n      destroyPopup()\n      hs.timer.doAfter(0.05, function()\n        saveQuitThenMaybeSleep()\n      end)\n      return\n    end\n    updateTimeLabel()\n  end)\n  popupTimer:start()\nend\n\nlocal function showCountdownPopup()\n  if popupActive then\n    destroyPopup()\n  end\n  popupActive = true\n  remaining = COUNTDOWN_SECONDS\n\n  cleanupUCC()\n  ucc = hs.webview.usercontent.new(\"reaperPopup\")\n  ucc:setCallback(function(msg)\n    local action = msg and msg.body\n    if type(action) == \"table\" then\n      action = action.action\n    end\n    if action == \"continue\" then\n      destroyPopup()\n      saveQuitThenMaybeSleep()\n    elseif action == \"cancel\" then\n      destroyPopup()\n      dismissedUntilReconnect = true\n      hs.alert.show(\n        \"Countdown canceled. Will not prompt again until Quantum reconnects.\"\n      )\n    end\n  end)\n\n  local frame = centerFrame(380, 260)\n  popupWV = hs.webview.new(\n    frame,\n    { developerExtrasEnabled = false, automaticallyShowsMenuBar = false },\n    ucc\n  )\n  local initialTime = string.format(\n    \"%d:%02d\",\n    math.floor(remaining / 60),\n    remaining % 60\n  )\n  popupWV:html(popupHTML(initialTime))\n  pcall(function()\n    popupWV:level(hs.drawing.windowLevels.modalPanel)\n  end)\n  pcall(function()\n    popupWV:bringToFront(true)\n  end)\n  pcall(function()\n    popupWV:allowTextEntry(true)\n  end)\n  pcall(function()\n    popupWV:closeOnEscape(false)\n  end)\n  hs.timer.doAfter(0.1, function()\n    if popupWV then\n      popupWV:show()\n      hs.timer.doAfter(0.3, updateTimeLabel)\n    end\n  end)\n\n  startPopupTimer()\n  hs.alert.show(\"Quantum 2626 disconnected. 5-minute countdown started.\")\n  log(\"Popup shown (countdown started)\")\nend\n\n-- ---------- Frontmost/Save/Quit helpers ----------\nlocal function frontIsReaper(app)\n  local front = hs.application.frontmostApplication()\n  if not front or not app then\n    return false\n  end\n  local fb, rb = nil, nil\n  pcall(function()\n    fb = front:bundleID()\n  end)\n  pcall(function()\n    rb = app:bundleID()\n  end)\n  return (fb and rb and fb == rb) or app:isFrontmost()\nend\n\nlocal function getReaperApp()\n  -- Only return if already running; do NOT launch\n  return hs.application.get(REAPER_APP)\nend\n\nlocal function focusReaperIfRunning(timeout)\n  timeout = timeout or 2.0\n  local app = getReaperApp()\n  if not app then\n    log(\"REAPER not running; skip focus\")\n    return nil, false\n  end\n  app:activate(true)\n  local elapsed, step = 0.0, 0.1\n  while elapsed &lt; timeout do\n    if frontIsReaper(app) then\n      log(\"Focus OK (%.1fs)\", elapsed)\n      return app, true\n    end\n    hs.timer.usleep(step * 1e6)\n    elapsed = elapsed + step\n  end\n  log(\"Focus not confirmed (%.1fs)\", timeout)\n  return app, false\nend\n\nlocal function menuSaveOrKeystroke(app)\n  if not app then\n    return\n  end\n  local did = false\n  local function try(path)\n    local ok = false\n    pcall(function()\n      ok = app:selectMenuItem(path)\n    end)\n    return ok\n  end\n  did = try({ \"File\", \"Save project\" }) or did\n  did = try({ \"File\", \"Save\" }) or did\n  if not did then\n    pcall(function()\n      hs.eventtap.keyStroke({ \"cmd\" }, \"s\", 0)\n    end)\n  end\nend\n\nlocal function menuQuitOrKeystroke(app)\n  if not app then\n    return\n  end\n  local did = false\n  local function try(path)\n    local ok = false\n    pcall(function()\n      ok = app:selectMenuItem(path)\n    end)\n    return ok\n  end\n  did = try({ \"REAPER\", \"Quit REAPER\" }) or did\n  did = try({ \"Reaper\", \"Quit REAPER\" }) or did\n  did = try({ \"REAPER\", \"Quit\" }) or did\n  if not did then\n    pcall(function()\n      hs.eventtap.keyStroke({ \"cmd\" }, \"q\", 0)\n    end)\n  end\nend\n\n-- ---------- Save \u2192 Quit \u2192 Verify \u2192 Sleep ----------\nfunction saveQuitThenMaybeSleep(opts)\n  opts = opts or {}\n  local focusTimeout = opts.focusTimeout or 2.0\n  local quitGrace = opts.quitGrace or 20.0 -- total time to wait for exit\n  local killAfter = opts.killAfter or 6.0 -- when to force kill if still up\n  local pollInterval = opts.pollInterval or 0.2\n  local doSleep = opts.sleepAfter ~= false and SLEEP_AFTER_ACTION\n\n  log(\"Save/Quit pipeline start\")\n\n  -- 1) Only act if REAPER is already running (do NOT launch here)\n  local app, focused = focusReaperIfRunning(focusTimeout)\n  local hadApp = app ~= nil\n  if hadApp then\n    if not focused then\n      log(\"Proceeding without confirmed focus\")\n    end\n    menuSaveOrKeystroke(app)\n  else\n    log(\"REAPER not running; nothing to save/quit\")\n  end\n\n  -- 2) Request quit, then poll until gone (force-kill if needed)\n  hs.timer.doAfter(0.6, function()\n    if not hadApp then\n      if doSleep then\n        log(\"No REAPER running; sleeping now\")\n        pendingReconnectAutolaunch = true\n        hs.timer.doAfter(0.5, function()\n          log(\"Invoking system sleep\")\n          hs.caffeinate.systemSleep()\n        end)\n      end\n      return\n    end\n\n    local a = getReaperApp()\n    if a then\n      menuQuitOrKeystroke(a)\n    end\n\n    local elapsed, killed = 0.0, false\n    local waiter = nil\n    waiter = hs.timer.new(pollInterval, function()\n      elapsed = elapsed + pollInterval\n      local still = getReaperApp()\n\n      if not still then\n        if waiter then\n          waiter:stop()\n          waiter = nil\n        end\n        hs.alert.show(\"REAPER saved and quit.\")\n        log(\"REAPER exit verified (%.1fs); sleep=%s\", elapsed, tostring(doSleep))\n        if doSleep then\n          hs.timer.doAfter(0.5, function()\n            log(\"Invoking system sleep\")\n            pendingReconnectAutolaunch = true\n            hs.caffeinate.systemSleep()\n          end)\n        end\n        return\n      end\n\n      if elapsed &gt;= killAfter and not killed then\n        killed = true\n        log(\"Force-killing REAPER at %.1fs\", elapsed)\n        hs.alert.show(\"REAPER didn't quit; forcing kill.\")\n        pcall(function()\n          still:kill()\n        end)\n      end\n\n      if killed and elapsed &gt;= (killAfter + 5.0) then\n        local pid = still:pid()\n        if pid then\n          log(\"Escalating kill -9 to pid %d\", pid)\n          hs.execute(string.format(\"/bin/kill -9 %d\", pid))\n        end\n      end\n\n      if elapsed &gt;= quitGrace then\n        if waiter then\n          waiter:stop()\n          waiter = nil\n        end\n        local alive = getReaperApp() ~= nil\n        log(\n          \"Quit wait timeout (alive=%s); sleep=%s\",\n          tostring(alive),\n          tostring(doSleep)\n        )\n        if doSleep then\n          hs.timer.doAfter(0.5, function()\n            log(\"Invoking system sleep (timeout path)\")\n            pendingReconnectAutolaunch = true\n            hs.caffeinate.systemSleep()\n          end)\n        end\n      end\n    end)\n    if waiter then\n      waiter:start()\n    end\n  end)\nend\n\n-- ---------- State machine ----------\nlocal function applyState(nowConnected)\n  if nowConnected and not isConnected then\n    isConnected = true\n    dismissedUntilReconnect = false\n    if popupActive then\n      destroyPopup()\n    end\n    log(\"Reconnected (state change)\")\n    hs.alert.show(\"Quantum 2626 reconnected. Countdown canceled.\")\n    -- Fallback autolaunch: if we recently initiated sleep (or within wake window),\n    -- launch REAPER once when the device reconnects.\n    if pendingReconnectAutolaunch then\n      pendingReconnectAutolaunch = false\n      hs.timer.doAfter(2.0, function()\n        launchReaperIfWanted(\"autolaunch-on-reconnect\")\n      end)\n    elseif LAUNCH_ON_WAKE and now() &lt; wakeHintUntil then\n      hs.timer.doAfter(2.0, function()\n        launchReaperIfWanted(\"reconnectWithinWakeWindow\")\n      end)\n    end\n  elseif (not nowConnected) and isConnected then\n    isConnected = false\n    log(\"Disconnected (state change)\")\n    if not dismissedUntilReconnect and not popupActive then\n      showCountdownPopup()\n    else\n      log(\n        \"Popup suppressed (dismissedUntilReconnect=%s)\",\n        tostring(dismissedUntilReconnect)\n      )\n    end\n  end\nend\n\nlocal function debouncedCheck()\n  if debounceTimer then\n    pcall(function()\n      debounceTimer:stop()\n    end)\n    debounceTimer = nil\n  end\n  debounceTimer = hs.timer.doAfter(0.25, function()\n    debounceTimer = nil\n    applyState(devicePresentNow())\n  end)\nend\n\n-- ---------- Detection setup/restart ----------\nlocal function startPoller()\n  if pollTimer then\n    pollTimer:stop()\n    pollTimer = nil\n  end\n  pollTimer = hs.timer.doEvery(POLL_INTERVAL, debouncedCheck)\n  log(\"Poller running every %ds\", POLL_INTERVAL)\nend\n\nlocal function restartDetection(reason)\n  log(\"Restarting detection (%s)\", reason or \"unknown\")\n  if pollTimer then\n    pollTimer:stop()\n    pollTimer = nil\n  end\n  debounceTimer = nil\n  startPoller()\n  isConnected = devicePresentNow()\n  log(\"Current device state: %s\", isConnected and \"connected\" or \"disconnected\")\nend\n\n-- ---------- Wake handling &amp; REAPER launch ----------\nfunction launchReaperIfWanted(tag)\n  tag = tag or \"wake\"\n  if LAUNCH_ONLY_IF_DEVICE_PRESENT and not devicePresentNow() then\n    log(\"[%s] Not launching: device not present\", tag)\n    return\n  end\n  if hs.application.get(REAPER_APP) then\n    log(\"[%s] REAPER already running\", tag)\n    return\n  end\n  local ok = hs.application.launchOrFocusByBundleID(REAPER_BUNDLE_ID)\n  if not ok then\n    hs.execute(\"/usr/bin/open -b \" .. REAPER_BUNDLE_ID, true)\n  end\n  hs.timer.doAfter(2.5, function()\n    if hs.application.get(REAPER_APP) then\n      hs.alert.show(\"REAPER launched after wake.\")\n      log(\"[%s] REAPER launch verified\", tag)\n    else\n      log(\"[%s] REAPER not up after 2.5s\", tag)\n    end\n  end)\nend\n\nlocal caffeinateWatcher = hs.caffeinate.watcher.new(function(event)\n  if event == hs.caffeinate.watcher.systemDidWake then\n    log(\"systemDidWake\")\n    wakeHintUntil = now() + RECONNECT_LAUNCH_WINDOW\n    -- After OS wake, give CoreAudio and login session some time\n    restartDetection(\"systemDidWake\")\n    hs.timer.doAfter(WAKE_LAUNCH_DELAY, function()\n      launchReaperIfWanted(\"wake+t+\" .. WAKE_LAUNCH_DELAY)\n    end)\n    for _, d in ipairs(WAKE_LAUNCH_RETRY_DELAYS) do\n      hs.timer.doAfter(d, function()\n        launchReaperIfWanted(\"wake+t+\" .. d)\n      end)\n    end\n  elseif\n    event == hs.caffeinate.watcher.screensDidUnlock\n    or event == hs.caffeinate.watcher.sessionDidBecomeActive\n  then\n    -- When the session is active again (user unlocked), rescan\n    log(\"session active/unlocked -&gt; rescan and (maybe) launch\")\n    wakeHintUntil = now() + RECONNECT_LAUNCH_WINDOW\n    restartDetection(\"sessionActive\")\n    hs.timer.doAfter(3, function()\n      launchReaperIfWanted(\"sessionActive+t+3\")\n    end)\n  elseif event == hs.caffeinate.watcher.screensDidWake then\n    log(\"screensDidWake\")\n    wakeHintUntil = now() + RECONNECT_LAUNCH_WINDOW\n    -- No immediate launch here; detection will pick up device\n  end\nend)\ncaffeinateWatcher:start()\nhs.alert.show(\"REAPER wake launcher loaded.\")\n\n-- ---------- Start detection ----------\nrestartDetection(\"init\")\n\n-- ---------- Manual hotkeys ----------\n-- Ctrl+Cmd+0 \u2192 manual restart of detection\nhs.hotkey.bind({ \"ctrl\", \"cmd\" }, \"0\", function()\n  restartDetection(\"manual\")\n  hs.alert.show(\"Quantum detector restarted (manual).\")\nend)\n\n-- Ctrl+Cmd+9 \u2192 dump audio devices\nhs.hotkey.bind({ \"ctrl\", \"cmd\" }, \"9\", function()\n  listAudioDevices()\n  hs.alert.show(\"Listed audio devices in console.\")\nend)\n</code></pre>"}]}